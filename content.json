{"meta":{"title":"Nekilc","subtitle":"","description":"代码给你，PPT给我。","author":"Nekilc","url":"http://www.nekilc.com","root":"/"},"pages":[{"title":"分类","date":"2020-07-17T07:42:49.000Z","updated":"2020-08-02T11:16:10.921Z","comments":true,"path":"categories/index.html","permalink":"http://www.nekilc.com/categories/index.html","excerpt":"","text":""},{"title":"关于","date":"2020-07-17T07:44:00.000Z","updated":"2020-08-02T13:03:28.710Z","comments":false,"path":"about/index.html","permalink":"http://www.nekilc.com/about/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-07-17T07:42:32.000Z","updated":"2020-08-02T11:16:48.665Z","comments":true,"path":"tags/index.html","permalink":"http://www.nekilc.com/tags/index.html","excerpt":"","text":""},{"title":"仓库","date":"2020-08-02T10:42:13.000Z","updated":"2020-08-02T11:30:23.330Z","comments":true,"path":"repository/index.html","permalink":"http://www.nekilc.com/repository/index.html","excerpt":"","text":""}],"posts":[{"title":"数据完整性设计理解","slug":"数据库/数据完整性设计理解","date":"2020-02-05T19:06:37.000Z","updated":"2020-07-21T10:54:50.482Z","comments":true,"path":"YE6KFM.html","link":"","permalink":"http://www.nekilc.com/YE6KFM.html","excerpt":"数据库完整性是指数据库中数据的正确性和相容性。数据库完整性由各种各样的完整性约束来保证，因此可以说数据库完整性设计就是数据庠完整性约束的设计。数据库完整性约束可以通过DBMS^DBMS或应用程序来实现，基于DBMS的完整性约束作为模式的一部分存入数据库中。通过DBMS实现的数据库完整性按照数据库设计步骤进行设计，而由应用软件实现的数据库完整性则纳入应用软件设计。","text":"数据库完整性是指数据库中数据的正确性和相容性。数据库完整性由各种各样的完整性约束来保证，因此可以说数据库完整性设计就是数据庠完整性约束的设计。数据库完整性约束可以通过DBMS^DBMS或应用程序来实现，基于DBMS的完整性约束作为模式的一部分存入数据库中。通过DBMS实现的数据库完整性按照数据库设计步骤进行设计，而由应用软件实现的数据库完整性则纳入应用软件设计。 1. 数据库完整性设计原则 静态约束应尽量包含在数据库模式中，而动态约束由应用程序实现。 触发器性能开销大，非用不可时使用before触发器。 制定完整性约束的命名规范。 根据业务规则对数据库完整性进行测试，排除约束冲突。 2. 数据库完整性的作用 防止合法用户使用数据库时向数据库中添加不合语义的数据。 降低应用程序的复杂性，提高应用程序的运行效率。 比应用程序更容易实现数据库的完整性。 3. 六类数据库完整性约束 列级静态约束 元组级静态约束 关系级静态约束 列级动态约束 元组级动态约束 关系级动态约束 4. 数据库完整性设计示例 需求分析阶段 经过系统分析员、数据库分析员和用户的共同努力，确定系统模型中应该包含的对象，如人事及工资管理系统中的部门、员工和经理等，以及各种业务规则。 在完成寻找业务规则的工作之后，确定要作为数据库完整性的业务规则，并对业务规则进行分类。其中作为数据库模式一部分的完整性设计按下面的过程进行，而由应用软件来实现的数据库完整性设计将按照软件工程的方法进行。 概念结构设计阶段 概念结构设计阶段是将依据需求分析的结果转换成一个独立于具体DBMS的概念模型，即实体关系图（Entity-RelationshipDiagram,ERD）。在概念结构设计阶段就要开始数据库完整性设计的实质阶段，因为此阶段的实体关系将在逻辑结构设计阶段转化为实体完整性约束和参照完整性约束，到逻辑结构设计阶段将完成设计的主要工作。 逻辑结构设计阶段 此阶段就是将概念结构转换为某个DBMS所支持的数据模型，并对其进行优化，包括对关系模型的规范化。此时，依据DBMS提供的完整性约束机制，对尚未加入逻辑结构中的完整性约束列表，逐条选择合适的方式加以实现。 在逻辑结构设计阶段结束时，作为数据库模式一部分的完整性设计也就基本完成了。每种业务规则都可能有好几种实现方式，应该选择对数据库性能影响最小的一种，有时需通过实际测试来决定。","categories":[{"name":"数据库","slug":"数据库","permalink":"http://www.nekilc.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"http://www.nekilc.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"}]}],"categories":[{"name":"数据库","slug":"数据库","permalink":"http://www.nekilc.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"http://www.nekilc.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"}]}