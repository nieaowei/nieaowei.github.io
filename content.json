{"meta":{"title":"Nekilc","subtitle":"","description":"代码给你，PPT给我。","author":"Nekilc","url":"http://www.nekilc.com","root":"/"},"pages":[{"title":"友情链接","date":"2020-08-03T11:29:04.000Z","updated":"2020-08-03T11:30:09.585Z","comments":true,"path":"links/index.html","permalink":"http://www.nekilc.com/links/index.html","excerpt":"","text":""},{"title":"关于","date":"2020-07-17T07:44:00.000Z","updated":"2020-08-02T13:03:28.710Z","comments":false,"path":"about/index.html","permalink":"http://www.nekilc.com/about/index.html","excerpt":"","text":""},{"title":"分类","date":"2020-07-17T07:42:49.000Z","updated":"2020-08-02T11:16:10.921Z","comments":true,"path":"categories/index.html","permalink":"http://www.nekilc.com/categories/index.html","excerpt":"","text":""},{"title":"仓库","date":"2020-08-02T10:42:13.000Z","updated":"2020-08-02T11:30:23.330Z","comments":true,"path":"repository/index.html","permalink":"http://www.nekilc.com/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-07-17T07:42:32.000Z","updated":"2020-08-02T13:33:02.121Z","comments":true,"path":"tags/index.html","permalink":"http://www.nekilc.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Vue引用类型的监听watch","slug":"Vue/Vue引用类型的监听watch","date":"2020-08-15T17:01:06.469Z","updated":"2020-08-16T19:57:24.898Z","comments":true,"path":"XH9XQ6.html","link":"","permalink":"http://www.nekilc.com/XH9XQ6.html","excerpt":"和Vue watch之间的小故事。","text":"和Vue watch之间的小故事。 在今天的项目编写中，遇到了vue监听起作用，但无法知道具体哪个值变化的问题，在搜索了一会后，几乎千篇一律的让我加deep监听属性，但是都忽略一个问题，他们确实解决了监听的问题，其实在打印新旧值的时候你会发现，两个值是一样的并无新旧值区别，原因是因为引用传递，所以监听到的是引用的地址。在那个时间点，那个引用地址存的就是你修改后的值,也就是说监听回调的新旧值参数对象是同一个地址同一个引用。 12345678910111213141516171819202122232425262728293031&lt;template&gt; &lt;el-button @click=\"change(4)\"&gt;&lt;/el-button&gt;&lt;/template&gt;&lt;script lang=\"ts\"&gt;import Vue from 'vue'export default Vue.extend(&#123; data() &#123; return &#123; obj:&#123; a: 0, b: 1 &#125; &#125; &#125;, watch:&#123; obj: &#123; deep: true, handler: function (val,oldVal) &#123; console.log(val) console.log(oldVal) &#125; &#125; &#125;, methods: &#123; change(v: number) &#123; this.obj.a=v &#125; &#125;&#125;)&lt;/script&gt; 当你通过其他事件将obj.a赋予新值时，譬如4，那么控制台输出的会是： 那么解决这个问题的方法就是使用computed去获取单个属性，然后监听这个computed的值： 1234567891011121314151617181920212223242526272829303132333435&lt;template&gt; &lt;el-button @click=\"change(4)\"&gt;&lt;/el-button&gt;&lt;/template&gt;&lt;script lang=\"ts\"&gt;import Vue from 'vue'export default Vue.extend(&#123; data() &#123; return &#123; obj:&#123; a: 0, b: 1 &#125; &#125; &#125;, computed:&#123; a: function(): number&#123; return this.obj.a &#125; &#125;, watch:&#123; a: &#123; handler: function (val,oldVal) &#123; console.log(val) console.log(oldVal) &#125; &#125; &#125;, methods: &#123; change(v: number) &#123; this.obj.a=v &#125; &#125;&#125;)&lt;/script&gt; 结果如下了。","categories":[{"name":"Vue","slug":"Vue","permalink":"http://www.nekilc.com/categories/Vue/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"http://www.nekilc.com/tags/Vue/"}]},{"title":"Element-UI中Table高度自适应问题","slug":"Vue/Element-UI中Table高度自适应问题","date":"2020-08-12T22:40:24.883Z","updated":"2020-08-12T23:07:16.936Z","comments":true,"path":"3XDPK46.html","link":"","permalink":"http://www.nekilc.com/3XDPK46.html","excerpt":"","text":"我今天在写代码时，发现了这个问题，无论我怎么调整父级容器，包括绝对定位、Flex布局等，发现El-table这个组件的高度不受父级约束，为了解决这个问题，我尝试了获取浏览器可见区域高度，将El-table的max-height属性绑定到 Vue 数据上，设置定时器去改变这个数据，即可保证初始高度正确以及后续浏览器窗口变化导致的高度变化。 代码如下： 123456789mounted () &#123; // eslint-disable-next-line @typescript-eslint/no-this-alias const that = this console.log(this.$refs.bodyheader) setInterval(function () &#123; // 这一串数据是我减去了table组件上方固定高度的组件的高度。 that.tableHeight = document.documentElement.clientHeight - 50 - 62 - 41 - 16 - 32 - 50 - 30 &#125;, 500)&#125;, 效果如图：","categories":[{"name":"Vue","slug":"Vue","permalink":"http://www.nekilc.com/categories/Vue/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"http://www.nekilc.com/tags/Vue/"}]},{"title":"Kotlin安卓开发-环境搭建（一）","slug":"安卓/Kotlin安卓开发-环境搭建（一）","date":"2020-02-29T15:29:46.000Z","updated":"2020-09-16T10:25:24.351Z","comments":true,"path":"1X1JYEX.html","link":"","permalink":"http://www.nekilc.com/1X1JYEX.html","excerpt":"","text":"前言 本文旨在小白也能够顺利安装安卓开发环境，解决虚拟设备、SDK、GRADLE的路径修改问题。 Java开发环境 该教程无需手动安装Java环境。 集成开发环境（Android Studio） . 下载安装JetBrain的ToolBox 点击下载 . 修改ToolBox的安装地址 打开ToolBox的设置 选择你想存储该应用程序的路径并应用 返回工具列表，找到AS 可以选择你想要的版本，个人喜欢最新版 . 配置SDK路径 等待安装完成，打开AS 提示不能增加AndroidSDK，原因是因为需要设置代理，没有代理的话直接取消，会打开配置界面 关掉如下配置界面，会回到启动界面 打开设置 找到如下界面，点击edit编辑按钮 选择你需要安装的位置后，一路next，然后等待很长一段时间，我使用了代理，所以非常快。 结束之后你会看到如下界面，此时路径已经修改，说明你成功了 . 配置安卓虚拟设备 进行如下操作，以进行下一步，勾选HAXM ，然后应用（apply） 应用后会出现一个界面，一路next，建议该界面下选择2gb 关闭AS，进行环境变量配置 打开window设置，界面搜索 编辑系统环境变量 选择环境变量 新建一个名为 ANDROID_SDK_HOME的环境变量，变量值填写你自己的路径,然后确定 以及 应用 再次启动AS，启动界面，选择如下设置去设置安卓虚拟设备 选择一个设备，当然你也可以自定义设备信息（屏幕尺寸、颜色深度等等）， 下一步之后，会看到这个界面，下载一个安卓系统镜像 左下角提示没有选择系统镜像，你需要点击相应安卓版本的下载（Download）按钮下载 点击下载后会弹出如下界面 等待完成即可 完成之后，下载按钮消失了，点击选择它，然后下一步就完成了 . 配置GRADLE路径 调试 . 虚拟设备调试 . 真实设备调试","categories":[{"name":"安卓","slug":"安卓","permalink":"http://www.nekilc.com/categories/%E5%AE%89%E5%8D%93/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://www.nekilc.com/tags/Java/"},{"name":"Android","slug":"Android","permalink":"http://www.nekilc.com/tags/Android/"}]},{"title":"数据完整性设计理解","slug":"数据库/数据完整性设计理解","date":"2020-02-05T19:06:37.000Z","updated":"2020-07-21T10:54:50.482Z","comments":true,"path":"YE6KFM.html","link":"","permalink":"http://www.nekilc.com/YE6KFM.html","excerpt":"数据库完整性是指数据库中数据的正确性和相容性。数据库完整性由各种各样的完整性约束来保证，因此可以说数据库完整性设计就是数据庠完整性约束的设计。数据库完整性约束可以通过DBMS^DBMS或应用程序来实现，基于DBMS的完整性约束作为模式的一部分存入数据库中。通过DBMS实现的数据库完整性按照数据库设计步骤进行设计，而由应用软件实现的数据库完整性则纳入应用软件设计。","text":"数据库完整性是指数据库中数据的正确性和相容性。数据库完整性由各种各样的完整性约束来保证，因此可以说数据库完整性设计就是数据庠完整性约束的设计。数据库完整性约束可以通过DBMS^DBMS或应用程序来实现，基于DBMS的完整性约束作为模式的一部分存入数据库中。通过DBMS实现的数据库完整性按照数据库设计步骤进行设计，而由应用软件实现的数据库完整性则纳入应用软件设计。 1. 数据库完整性设计原则 静态约束应尽量包含在数据库模式中，而动态约束由应用程序实现。 触发器性能开销大，非用不可时使用before触发器。 制定完整性约束的命名规范。 根据业务规则对数据库完整性进行测试，排除约束冲突。 2. 数据库完整性的作用 防止合法用户使用数据库时向数据库中添加不合语义的数据。 降低应用程序的复杂性，提高应用程序的运行效率。 比应用程序更容易实现数据库的完整性。 3. 六类数据库完整性约束 列级静态约束 元组级静态约束 关系级静态约束 列级动态约束 元组级动态约束 关系级动态约束 4. 数据库完整性设计示例 需求分析阶段 经过系统分析员、数据库分析员和用户的共同努力，确定系统模型中应该包含的对象，如人事及工资管理系统中的部门、员工和经理等，以及各种业务规则。 在完成寻找业务规则的工作之后，确定要作为数据库完整性的业务规则，并对业务规则进行分类。其中作为数据库模式一部分的完整性设计按下面的过程进行，而由应用软件来实现的数据库完整性设计将按照软件工程的方法进行。 概念结构设计阶段 概念结构设计阶段是将依据需求分析的结果转换成一个独立于具体DBMS的概念模型，即实体关系图（Entity-RelationshipDiagram,ERD）。在概念结构设计阶段就要开始数据库完整性设计的实质阶段，因为此阶段的实体关系将在逻辑结构设计阶段转化为实体完整性约束和参照完整性约束，到逻辑结构设计阶段将完成设计的主要工作。 逻辑结构设计阶段 此阶段就是将概念结构转换为某个DBMS所支持的数据模型，并对其进行优化，包括对关系模型的规范化。此时，依据DBMS提供的完整性约束机制，对尚未加入逻辑结构中的完整性约束列表，逐条选择合适的方式加以实现。 在逻辑结构设计阶段结束时，作为数据库模式一部分的完整性设计也就基本完成了。每种业务规则都可能有好几种实现方式，应该选择对数据库性能影响最小的一种，有时需通过实际测试来决定。","categories":[{"name":"数据库","slug":"数据库","permalink":"http://www.nekilc.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"http://www.nekilc.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"}]}],"categories":[{"name":"Vue","slug":"Vue","permalink":"http://www.nekilc.com/categories/Vue/"},{"name":"安卓","slug":"安卓","permalink":"http://www.nekilc.com/categories/%E5%AE%89%E5%8D%93/"},{"name":"数据库","slug":"数据库","permalink":"http://www.nekilc.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"http://www.nekilc.com/tags/Vue/"},{"name":"Java","slug":"Java","permalink":"http://www.nekilc.com/tags/Java/"},{"name":"Android","slug":"Android","permalink":"http://www.nekilc.com/tags/Android/"},{"name":"数据库","slug":"数据库","permalink":"http://www.nekilc.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"}]}