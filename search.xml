<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Vue引用类型的监听watch</title>
    <url>/XH9XQ6.html</url>
    <content><![CDATA[<p>和Vue watch之间的小故事。</p>
<a id="more"></a>
<p>在今天的项目编写中，遇到了vue监听起作用，但无法知道具体哪个值变化的问题，在搜索了一会后，几乎千篇一律的让我加deep监听属性，但是都忽略一个问题，他们确实解决了监听的问题，其实在打印新旧值的时候你会发现，两个值是一样的并无新旧值区别，原因是因为引用传递，所以监听到的是引用的地址。在那个时间点，那个引用地址存的就是你修改后的值,也就是说监听回调的新旧值参数对象是同一个地址同一个引用。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">"change(4)"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">"ts"</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> Vue.extend(&#123;</span></span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      obj:&#123;</span><br><span class="line">          a: 0,</span><br><span class="line">          b: 1</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch:&#123;</span><br><span class="line">    obj: &#123;</span><br><span class="line"><span class="actionscript">      deep: <span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">      handler: <span class="function"><span class="keyword">function</span> <span class="params">(val,oldVal)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(val)</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(oldVal)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    change(v: number) &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.obj.a=v</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>当你通过其他事件将obj.a赋予新值时，譬如4，那么控制台输出的会是：<br>
<img src="https://gitee.com/nieaowei/images/raw/master/B2E75423-FFF9-494E-8F37-75BBD9C73F0E.png" alt=""></p>
<p>那么解决这个问题的方法就是使用computed去获取单个属性，然后监听这个computed的值：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">"change(4)"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">"ts"</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> Vue.extend(&#123;</span></span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">        obj:&#123;</span><br><span class="line">          a: 0,</span><br><span class="line">          b: 1</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed:&#123;</span><br><span class="line"><span class="actionscript">    a: <span class="function"><span class="keyword">function</span><span class="params">()</span>: number</span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> <span class="keyword">this</span>.obj.a</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch:&#123;</span><br><span class="line">    a: &#123;</span><br><span class="line"><span class="actionscript">      handler: <span class="function"><span class="keyword">function</span> <span class="params">(val,oldVal)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(val)</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(oldVal)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    change(v: number) &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.obj.a=v</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>结果如下了。</p>
<p><img src="https://gitee.com/nieaowei/images/raw/master/20200817034855.png" alt=""></p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Element-UI中Table高度自适应问题</title>
    <url>/3XDPK46.html</url>
    <content><![CDATA[<a id="more"></a>
<p>我今天在写代码时，发现了这个问题，无论我怎么调整父级容器，包括绝对定位、Flex布局等，发现<code>El-table</code>这个组件的高度不受父级约束，为了解决这个问题，我尝试了获取浏览器可见区域高度，将<code>El-table</code>的<code>max-height</code>属性绑定到 <code>Vue</code> 数据上，设置定时器去改变这个数据，即可保证初始高度正确以及后续浏览器窗口变化导致的高度变化。</p>
<p>代码如下：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">mounted () &#123;</span><br><span class="line">  <span class="comment">// eslint-disable-next-line @typescript-eslint/no-this-alias</span></span><br><span class="line">  <span class="keyword">const</span> that = <span class="keyword">this</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.$refs.bodyheader)</span><br><span class="line">  setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 这一串数据是我减去了table组件上方固定高度的组件的高度。</span></span><br><span class="line">    that.tableHeight = <span class="built_in">document</span>.documentElement.clientHeight - <span class="number">50</span> - <span class="number">62</span> - <span class="number">41</span> - <span class="number">16</span> - <span class="number">32</span> - <span class="number">50</span> - <span class="number">30</span></span><br><span class="line">  &#125;, <span class="number">500</span>)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>效果如图：<br>
<img src="https://pic.downk.cc/item/5f3475c914195aa594256825.gif" alt="image"></p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Kotlin安卓开发-环境搭建（一）</title>
    <url>/1X1JYEX.html</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p>本文旨在小白也能够顺利安装安卓开发环境，解决虚拟设备、SDK、GRADLE的路径修改问题。</p>
<h2 id="Java开发环境">Java开发环境</h2>
<p>该教程无需手动安装Java环境。</p>
<h2 id="集成开发环境（Android-Studio）">集成开发环境（Android Studio）</h2>
<h3 id="下载安装JetBrain的ToolBox">. 下载安装JetBrain的ToolBox</h3>
<p><a href="https://www.lanzous.com/iaa5pje" target="_blank" rel="noopener">点击下载</a></p>
<h3 id="修改ToolBox的安装地址">. 修改ToolBox的安装地址</h3>
<ol>
<li>
<p>打开ToolBox的设置</p>
<p><img src="https://gitee.com/nieaowei/images/raw/master/1584787643_20200315163947962_127009905.png" alt=""></p>
</li>
<li>
<p>选择你想存储该应用程序的路径并应用</p>
<p><img src="https://gitee.com/nieaowei/images/raw/master/1584787643_20200315164457880_56728217.png" alt=""></p>
<p><img src="https://gitee.com/nieaowei/images/raw/master/1584787645_20200315165345379_406917145.png" alt=""></p>
</li>
<li>
<p>返回工具列表，找到AS</p>
</li>
</ol>
<p>可以选择你想要的版本，个人喜欢最新版</p>
<p><img src="https://gitee.com/nieaowei/images/raw/master/1584787645_20200315164649245_2095887498.png" alt=""></p>
<h3 id="配置SDK路径">. 配置SDK路径</h3>
<ol>
<li>
<p>等待安装完成，打开AS</p>
<p><img src="https://gitee.com/nieaowei/images/raw/master/1584787646_20200315165809435_1468523967.png" alt=""></p>
</li>
<li>
<p>提示不能增加AndroidSDK，原因是因为需要设置代理，没有代理的话直接取消，会打开配置界面<br>
<img src="https://gitee.com/nieaowei/images/raw/master/1584787646_20200315165903140_452758398.png" alt=""></p>
</li>
<li>
<p>关掉如下配置界面，会回到启动界面<br>
<img src="https://gitee.com/nieaowei/images/raw/master/1584787646_20200315170030096_975833865.png" alt=""></p>
</li>
<li>
<p>打开设置<br>
<img src="https://gitee.com/nieaowei/images/raw/master/1584787647_20200315170748645_423692269.png" alt=""></p>
</li>
<li>
<p>找到如下界面，点击edit编辑按钮<br>
<img src="https://gitee.com/nieaowei/images/raw/master/1584787647_20200315170841832_2087675278.png" alt=""></p>
</li>
<li>
<p>选择你需要安装的位置后，一路next，然后等待很长一段时间，我使用了代理，所以非常快。<br>
<img src="https://gitee.com/nieaowei/images/raw/master/1584787648_20200315170938889_1970572660.png" alt=""></p>
</li>
<li>
<p>结束之后你会看到如下界面，此时路径已经修改，说明你成功了<br>
<img src="https://gitee.com/nieaowei/images/raw/master/1584787648_20200315171553399_921892586.png" alt=""></p>
</li>
</ol>
<p><img src="https://gitee.com/nieaowei/images/raw/master/1584787649_20200315171654184_154179797.png" alt=""></p>
<h3 id="配置安卓虚拟设备">. 配置安卓虚拟设备</h3>
<ol>
<li>
<p>进行如下操作，以进行下一步，勾选HAXM ，然后应用（apply）<br>
<img src="https://gitee.com/nieaowei/images/raw/master/1584787650_20200315172321074_502469578.png" alt=""></p>
</li>
<li>
<p>应用后会出现一个界面，一路next，建议该界面下选择2gb<br>
<img src="https://gitee.com/nieaowei/images/raw/master/1584787651_20200315172442554_1100497442.png" alt=""></p>
</li>
<li>
<p>关闭AS，进行环境变量配置</p>
</li>
</ol>
<p>打开window设置，界面搜索 编辑系统环境变量</p>
<p><img src="https://gitee.com/nieaowei/images/raw/master/1584787651_20200315182609043_1942115051.png" alt=""></p>
<p>选择环境变量</p>
<p><img src="https://gitee.com/nieaowei/images/raw/master/1584787652_20200315182623931_755197930.png" alt=""></p>
<p>新建一个名为 ANDROID_SDK_HOME的环境变量，变量值填写你自己的路径,然后确定 以及 应用</p>
<p><img src="https://gitee.com/nieaowei/images/raw/master/1584787652_20200315182643838_478493330.png" alt=""></p>
<ol start="4">
<li>再次启动AS，启动界面，选择如下设置去设置安卓虚拟设备<br>
<img src="https://gitee.com/nieaowei/images/raw/master/1584787649_20200315171857442_1434569897.png" alt=""></li>
</ol>
<p><img src="https://gitee.com/nieaowei/images/raw/master/1584787650_20200315171933598_1017354010.png" alt=""></p>
<ol start="5">
<li>
<p>选择一个设备，当然你也可以自定义设备信息（屏幕尺寸、颜色深度等等），<br>
<img src="https://gitee.com/nieaowei/images/raw/master/1584787652_20200315182949443_2134231754.png" alt=""></p>
</li>
<li>
<p>下一步之后，会看到这个界面，下载一个安卓系统镜像<br>
左下角提示没有选择系统镜像，你需要点击相应安卓版本的下载（Download）按钮下载<br>
<img src="https://gitee.com/nieaowei/images/raw/master/1584787652_20200315182926933_1994992024.png" alt=""></p>
</li>
<li>
<p>点击下载后会弹出如下界面</p>
</li>
</ol>
<p><img src="https://gitee.com/nieaowei/images/raw/master/1584787653_20200315183303409_1132399407.png" alt=""><br>
等待完成即可<br>
<img src="https://gitee.com/nieaowei/images/raw/master/1584787653_20200315183327788_881726167.png" alt=""></p>
<ol start="8">
<li>完成之后，下载按钮消失了，点击选择它，然后下一步就完成了<br>
<img src="https://gitee.com/nieaowei/images/raw/master/1584787653_20200315183357684_1750000052.png" alt=""></li>
</ol>
<p><img src="https://gitee.com/nieaowei/images/raw/master/1584787654_20200315183449234_1537261378.png" alt=""></p>
<h3 id="配置GRADLE路径">. 配置GRADLE路径</h3>
<p><img src="https://gitee.com/nieaowei/images/raw/master/1584787655_20200315183847591_1762060673.png" alt=""></p>
<h2 id="调试">调试</h2>
<h3 id="虚拟设备调试">. 虚拟设备调试</h3>
<h3 id="真实设备调试">. 真实设备调试</h3>
]]></content>
      <categories>
        <category>安卓</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>数据完整性设计理解</title>
    <url>/YE6KFM.html</url>
    <content><![CDATA[<p>数据库完整性是指数据库中数据的正确性和相容性。数据库完整性由各种各样的完整性约束来保证，因此可以说数据库完整性设计就是数据庠完整性约束的设计。数据库完整性约束可以通过DBMS<a href="%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E3%80%82">^DBMS</a>或应用程序来实现，基于DBMS的完整性约束作为模式的一部分存入数据库中。通过DBMS实现的数据库完整性按照数据库设计步骤进行设计，而由应用软件实现的数据库完整性则纳入应用软件设计。</p>
<a id="more"></a>
<h1 id="1-数据库完整性设计原则">1. 数据库完整性设计原则</h1>
<ol>
<li>静态约束应尽量包含在数据库模式中，而动态约束由应用程序实现。</li>
<li>触发器性能开销大，非用不可时使用before触发器。</li>
<li>制定完整性约束的命名规范。</li>
<li>根据业务规则对数据库完整性进行测试，排除约束冲突。</li>
</ol>
<h1 id="2-数据库完整性的作用">2. 数据库完整性的作用</h1>
<ul>
<li>防止合法用户使用数据库时向数据库中添加不合语义的数据。</li>
<li>降低应用程序的复杂性，提高应用程序的运行效率。</li>
<li>比应用程序更容易实现数据库的完整性。</li>
</ul>
<h1 id="3-六类数据库完整性约束">3. 六类数据库完整性约束</h1>
<ol>
<li>列级静态约束</li>
<li>元组级静态约束</li>
<li>关系级静态约束</li>
<li>列级动态约束</li>
<li>元组级动态约束</li>
<li>关系级动态约束</li>
</ol>
<h1 id="4-数据库完整性设计示例">4. 数据库完整性设计示例</h1>
<ol>
<li>
<p>需求分析阶段</p>
<ul>
<li>
<p>经过系统分析员、数据库分析员和用户的共同努力，确定系统模型中应该包含的对象，如人事及工资管理系统中的部门、员工和经理等，以及各种业务规则。</p>
</li>
<li>
<p>在完成寻找业务规则的工作之后，确定要作为数据库完整性的业务规则，并对业务规则进行分类。其中作为数据库模式一部分的完整性设计按下面的过程进行，而由应用软件来实现的数据库完整性设计将按照软件工程的方法进行。</p>
</li>
</ul>
</li>
<li>
<p>概念结构设计阶段</p>
<ul>
<li>概念结构设计阶段是将依据需求分析的结果转换成一个独立于具体DBMS的概念模型，即实体关系图（Entity-RelationshipDiagram,ERD）。在概念结构设计阶段就要开始数据库完整性设计的实质阶段，因为此阶段的实体关系将在逻辑结构设计阶段转化为实体完整性约束和参照完整性约束，到逻辑结构设计阶段将完成设计的主要工作。</li>
</ul>
</li>
<li>
<p>逻辑结构设计阶段</p>
<ul>
<li>
<p>此阶段就是将概念结构转换为某个DBMS所支持的数据模型，并对其进行优化，包括对关系模型的规范化。此时，依据DBMS提供的完整性约束机制，对尚未加入逻辑结构中的完整性约束列表，逐条选择合适的方式加以实现。</p>
</li>
<li>
<p>在逻辑结构设计阶段结束时，作为数据库模式一部分的完整性设计也就基本完成了。每种业务规则都可能有好几种实现方式，应该选择对数据库性能影响最小的一种，有时需通过实际测试来决定。</p>
</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
</search>
