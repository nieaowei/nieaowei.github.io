<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>记录许久未碰的Makefile文件编写</title>
      <link href="/2020/28R01SH.html"/>
      <url>/2020/28R01SH.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-简言"><a href="#1-简言" class="headerlink" title="1. 简言"></a>1. 简言</h1><p>离上次使用Makefile还是半年前了，曾经用的很熟练的我，现在用起来已经很生疏了，最近在实训又一次接触到它，便写下这篇文章以实例记录Makefile文件的编写，为了下次不在踩坑。</p><h1 id="2-一个简单的例子"><a href="#2-一个简单的例子" class="headerlink" title="2. 一个简单的例子"></a>2. 一个简单的例子</h1><p>项目目录如下：</p><p><img src="https://gitee.com/nieaowei/images/raw/master/blog/20200616033820.png" alt></p><p>Makefile文件如下：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">main:main.c</span></span><br><span class="line">gcc -o main main.c</span><br></pre></td></tr></table></figure><p>在终端执行<code>make main</code>就可以构建程序了</p><p><img src="https://gitee.com/nieaowei/images/raw/master/blog/20200616034739.png" alt></p><p><code>main</code>其实就是我们的构建目标（target），最终我们可以编译出名为<code>main</code>的可执行程序，<code>gcc -o main main.c</code>其实就和终端下或者说shell脚本里面一样，是个执行命令。<br>然而makefile仅仅如此吗？那我还不如去用shell脚本。看下面这个例子，他的便利之处便体现出来了。</p><h1 id="3-一个便捷体现的例子"><a href="#3-一个便捷体现的例子" class="headerlink" title="3. 一个便捷体现的例子"></a>3. 一个便捷体现的例子</h1><p>项目目录如下：</p><p><img src="https://gitee.com/nieaowei/images/raw/master/blog/20200616034853.png" alt></p><p>Makefile文件如下：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SRC:= main.c sum.c</span><br><span class="line"></span><br><span class="line"><span class="section">run:main</span></span><br><span class="line">./main</span><br><span class="line"></span><br><span class="line"><span class="section">main:<span class="variable">$(SRC)</span></span></span><br><span class="line">gcc -o <span class="variable">$@</span> <span class="variable">$^</span></span><br></pre></td></tr></table></figure><p>这次我们又多了一个文件。我在<code>main.c</code>文件里面调用了<code>sum.c</code>的一个函数，这次是多文件编译，而且又多了一个构建目标<code>run</code>。执行看下结果：</p><p><img src="https://gitee.com/nieaowei/images/raw/master/blog/20200616035346.png" alt></p><p>可以很清晰的看到它按顺序去执行几个指令，<code>gcc</code>编译指令和<code>./main</code>程序执行。</p><p>那么逻辑就很清楚了，当我构建<code>run</code>目标时，它会先行构建<code>main</code>目标，因为<code>main</code>是<code>run</code>的依赖。以此类推，那么<code>SRC</code>中的文件就是<code>main</code>构建的依赖了。</p><p>在这份文件中，还有两个关键点 <code>$@</code> 和<code>$^</code> ,前者是表示本次构建的目标也就是<code>main</code>,后者则代表本次构建的依赖<code>SRC</code>中的所有文件。对于这里，还有一个关键词<code>$&lt;</code>，它代表的是依赖中的第一个文件，也就是这里的<code>main.c</code>文件,如果将此处的 <code>$^</code> 替换为 <code>$&lt;</code> 那么完整的构建语句是<code>gcc -o main main.c</code>,但它是无法编译的，因为它调用了另外文件的函数。</p><p>问题又来了，我每写一个文件，难道就要来写一下makefile吗？当然不是。Make还有更加便利的方式，它拥有一系列的处理函数和强大的类型推断功能，下面就以一个完整的项目来分析。</p><h1 id="3-完整项目结构的例子"><a href="#3-完整项目结构的例子" class="headerlink" title="3. 完整项目结构的例子"></a>3. 完整项目结构的例子</h1><p>项目目录如下：</p><p><img src="https://gitee.com/nieaowei/images/raw/master/blog/20200616040556.png" alt></p><p>在这里，<code>bin</code>为构建的可执行程序目录，<code>include</code>是自写头文件和<code>lib</code>头文件的存放文件夹，<code>lib</code>是调用库的存放文件夹，<code>obj</code>是交叉编译的中间文件的存放文件夹，<code>src</code>是c语言资源文件的存放文件夹。</p><p>makefile文件如下：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">CC:= gcc</span><br><span class="line">CFLAGS:= -Wall -Wextra -g</span><br><span class="line"></span><br><span class="line">BIN:= bin</span><br><span class="line">SRC:= src</span><br><span class="line">INCLUDE:= <span class="keyword">include</span></span><br><span class="line">LIB:= lib</span><br><span class="line">OBJ := obj</span><br><span class="line"></span><br><span class="line">LIBRARIES:=</span><br><span class="line"></span><br><span class="line"><span class="keyword">ifeq</span> (<span class="variable">$(OS)</span>,Windows_NT)</span><br><span class="line">EXECUTABLE:= main.exe</span><br><span class="line">SOURCEDIRS:= <span class="variable">$(SRC)</span></span><br><span class="line">INCLUDEDIRS:= <span class="variable">$(INCLUDE)</span></span><br><span class="line">LIBDIRS:= <span class="variable">$(LIB)</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">EXECUTABLE:= main</span><br><span class="line">SOURCEDIRS:= <span class="variable">$(<span class="built_in">shell</span> find <span class="variable">$(SRC)</span> -type d)</span></span><br><span class="line">INCLUDEDIRS:= <span class="variable">$(<span class="built_in">shell</span> find <span class="variable">$(INCLUDE)</span> -type d)</span></span><br><span class="line">LIBDIRS:= <span class="variable">$(<span class="built_in">shell</span> find <span class="variable">$(LIB)</span> -type d)</span></span><br><span class="line">OBJDIRS:= <span class="variable">$(<span class="built_in">shell</span> find <span class="variable">$(OBJ)</span> -type d)</span></span><br><span class="line"><span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line">CINCLUDES:= <span class="variable">$(<span class="built_in">patsubst</span> %,-I%, $(INCLUDEDIRS:%/=%)</span>)</span><br><span class="line">CLIBS:= <span class="variable">$(<span class="built_in">patsubst</span> %,-L%, $(LIBDIRS:%/=%)</span>)</span><br><span class="line"></span><br><span class="line">SOURCES:= <span class="variable">$(<span class="built_in">wildcard</span> $(<span class="built_in">patsubst</span> %,%/*.c, <span class="variable">$(SOURCEDIRS)</span>)</span>)</span><br><span class="line">OBJECTS:= <span class="variable">$(<span class="built_in">patsubst</span> %.c,<span class="variable">$(OBJ)</span>/%.o, $(<span class="built_in">notdir</span> <span class="variable">$(SOURCES)</span>)</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">all:  <span class="variable">$(BIN)</span>/<span class="variable">$(EXECUTABLE)</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta"><span class="meta-keyword">.PHONY</span>: clean</span></span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">-<span class="variable">$(RM)</span> <span class="variable">$(BIN)</span>/<span class="variable">$(EXECUTABLE)</span></span><br><span class="line">-<span class="variable">$(RM)</span> <span class="variable">$(OBJECTS)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">run: all</span></span><br><span class="line">./<span class="variable">$(BIN)</span>/<span class="variable">$(EXECUTABLE)</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$(BIN)</span>/<span class="variable">$(EXECUTABLE)</span>: <span class="variable">$(OBJECTS)</span></span><br><span class="line"><span class="variable">$(CC)</span> <span class="variable">$(CFLAGS)</span> <span class="variable">$(CINCLUDES)</span> <span class="variable">$(CLIBS)</span> <span class="variable">$^</span> -o <span class="variable">$@</span> <span class="variable">$(LIBRARIES)</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$(OBJECTS)</span>:<span class="variable">$(OBJDIRS)</span>/%.o:<span class="variable">$(SOURCEDIRS)</span>/%.c</span><br><span class="line">- <span class="variable">$(CC)</span> <span class="variable">$(CFLAGS)</span> <span class="variable">$(CINCLUDES)</span> <span class="variable">$(CLIBS)</span> -c -o <span class="variable">$@</span> <span class="variable">$&lt;</span> <span class="variable">$(LIBRARIES)</span></span><br></pre></td></tr></table></figure><p>可以看到在文件开头定义了很多变量，而变量的值都是环境变量中可执行程序(这里指<code>gcc</code>编译器)和目录，在这里提几个关键的点：</p><ul><li><code>$(shell xxxx)</code> 这是调用<code>shell</code>去执行后续的xxx命令，在此处就是调用了find在当前目录查找文件夹。</li><li><code>$(patsubst xx,ss,dir)</code> 这个是make提供的字符串处理函数，是将dir文件中xx替换成ss，对于此处<code>CINCLUDES</code>变量来说，是将<code>INCLUDEDIRS</code>文件夹下面的文件全部替换了 <code>-I文件</code>，<code>%</code>百分号是个通匹配符。举个例子，xx为<code>%.c</code>,ss为<code>%.o</code>,如果dir目录下有main.c和sum.c两个文件，那么该函数输出的是 main.o 和sum.o。</li><li><code>$(notdir xxx)</code>是将xxx中的文件的路径去掉，比如说<code>src/main.c</code> 和 <code>src/sum.c</code>,调用这个函数后的输出结果为 <code>main.c</code>和<code>sum.c</code>。</li><li><code>$(wildcard xxx)</code> 是去xxx中查找匹配的文件。举个例子xxx为<code>%.c</code>就会去查找目录下所有<code>.c</code>文件，可以解决在某些情况下，% 通配符失效的问题。</li><li><code>.PHONY target</code> 这个关键字就是声明这个target是个伪目标，是个不会产生实际文件的目标。</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$(OBJECTS)</span>:<span class="variable">$(OBJDIRS)</span>/%.o:<span class="variable">$(SOURCEDIRS)</span>/%.c</span><br><span class="line">- <span class="variable">$(CC)</span> <span class="variable">$(CFLAGS)</span> <span class="variable">$(CINCLUDES)</span> <span class="variable">$(CLIBS)</span> -c -o <span class="variable">$@</span> <span class="variable">$&lt;</span> <span class="variable">$(LIBRARIES)</span></span><br></pre></td></tr></table></figure><p>这段代码是典型的静态模式规则，使用gcc将指定目录下所有的.c文件编译成了.o文件，这里<code>%</code>的作用就非常大了，也体现了make的自动推导功能，而且会循环构建目标。<br>前后两个百分号的值通过自动推导回事一样的，<code>$(OBJECTS)</code>是构建目标的集合，<code>$(OBJDIRS)/%.o</code>指明了本次构建模板的模式，而<code>$(SOURCEDIRS)/%.c</code>就是构建依赖了，那么他的自动推导是怎么一回事呢？</p><p>举个例子，如果构建模目标集合中有 <code>obj/main.o obj/sum.o</code>，那么当目标 <code>%.o</code> 为 <code>main.o</code> 时，后面的 <code>%.c</code> 就会自动推导出 <code>main.c</code>,从而这次执行的命令就为<code>gcc -c -o main.o main.c</code>，第一个目标构建完后，就会去构建集合中的第二个目标，直到所有目标构建完成。</p><p>还有一个关键的点就是<code>$(INCLUDEDIRS:%/=%)</code>,这个操作是将该目录下所有的文件都取出来。比如该目录为<code>src</code>,目标有两个文件<code>main.c</code>和<code>sum.c</code>,那么这里输出将是<code>src/main.c</code>和<code>src/sum.c</code>。</p><p>我们还可以通过上面这点通过make的隐藏的规则来生成目标文件，缺点就是不能指定文件夹和不能指定<code>include</code>目录。你只能通过shell命令去移动。举个例子，<code>$(SOURCES:.c=.o)</code>,对于这里，会将<code>SOURCES</code>中的.c文件编译成.o文件，得益于隐式规则，他会自动使用gcc去编译，但如果.c文件中引用了其他路径下的include头文件，那么编译将会报错。这就是为什么我在上面使用了这段代码：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$(OBJECTS)</span>:<span class="variable">$(OBJDIRS)</span>/%.o:<span class="variable">$(SOURCEDIRS)</span>/%.c</span><br><span class="line">- <span class="variable">$(CC)</span> <span class="variable">$(CFLAGS)</span> <span class="variable">$(CINCLUDES)</span> <span class="variable">$(CLIBS)</span> -c -o <span class="variable">$@</span> <span class="variable">$&lt;</span> <span class="variable">$(LIBRARIES)</span></span><br></pre></td></tr></table></figure><p>因为我的头文件都在放在了<code>include</code>文件夹下，如果不这么做，那么依靠上述隐式编译是无法通过的。</p><p>最后看看结果：</p><p><img src="https://gitee.com/nieaowei/images/raw/master/blog/20200616050700.png" alt></p><p>看到了三条编译命令，分别生成了<code>main.o</code>、<code>sum.o</code>和<code>main</code>可执行程序。最后执行了<code>run</code>目标，执行了程序，并输出了程序结果。</p><p>可以看到obj文件夹下生成了.o文件,以及bin目录下的可执行程序:</p><p><img src="https://gitee.com/nieaowei/images/raw/master/blog/20200616051703.png" alt></p><h1 id="4-补充一点GCC知识"><a href="#4-补充一点GCC知识" class="headerlink" title="4. 补充一点GCC知识"></a>4. 补充一点GCC知识</h1><ul><li>-I 指明头文件文件夹。</li><li>-L 指明库文件文件夹。</li><li>-Wall 打开警告。</li><li>-g 生成调试信息。</li><li>-Wextra 产生额外的警告,其实就是更严格的代码检测模式。</li></ul><h1 id="5-源代码"><a href="#5-源代码" class="headerlink" title="5. 源代码"></a>5. 源代码</h1><p><a href="https://github.com/nieaowei/study/tree/master/linux/makefile-demo" target="_blank" rel="noopener">https://github.com/nieaowei/study/tree/master/linux/makefile-demo</a></p>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Makefile </tag>
            
            <tag> Make </tag>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JetPack Compose 安卓开发-普通通知示例</title>
      <link href="/2020/2NK8Q7N.html"/>
      <url>/2020/2NK8Q7N.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-系统版本更迭历史"><a href="#1-系统版本更迭历史" class="headerlink" title="1. 系统版本更迭历史"></a>1. 系统版本更迭历史</h1><ol><li><p>Android4.1(API16)</p><ul><li>支持展开式通知</li><li>支持为通知增加按钮</li><li>允许在设置中关闭通知</li></ul></li><li><p>Android4.4(API19和API20)</p><ul><li>支持通知侦听器服务器</li></ul></li><li><p>Android5(API21)</p><ul><li>添加<code>setPriority()</code>方法以设置通知的权重</li><li>支持浮动通知和锁定屏幕的通知</li><li>支持配置勿扰模式</li></ul></li><li><p>Android7.0(API24)</p><ul><li>支持通知内连回复</li></ul></li><li><p>Android8.0(API26)</p><ul><li>必须将通知放入特定的渠道(channel)中</li><li>按渠道关闭通知</li><li>应用图标显示通知</li><li>权重设置由<code>NotificationCompat.Builder.setPriority()</code>更换为<code>NotificationChannel.setImportance()</code></li></ul></li></ol><h1 id="2-创建普通通知"><a href="#2-创建普通通知" class="headerlink" title="2. 创建普通通知"></a>2. 创建普通通知</h1><ol><li><p>构建一个通知</p><p> 在安卓7及更低版本中，<code>NotificationCompat.Builder()</code>的第二个参数是渠道ID是不必的，但是优先级<code>setPriority()</code>是必须的。<br> 但是在安卓8及更高版本，通过渠道构建时设置优先级<code>NotificationChannel.setImportance()</code>,在通知构建时必须设置渠道id，渠道是预先创建的。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> notification = NotificationCompat.Builder(<span class="keyword">this</span>,<span class="string">"123"</span>)<span class="comment">//渠道id为123</span></span><br><span class="line">            .setContentTitle(title)<span class="comment">//设置通知标题</span></span><br><span class="line">            .setContentText(msg)<span class="comment">//设置通知内容</span></span><br><span class="line">            .setSmallIcon(R.drawable.ic_launcher_background)<span class="comment">//设置通知的小图标，必须</span></span><br><span class="line">            .setPriority(NotificationCompat.PRIORITY_DEFAULT)<span class="comment">//兼容7以及更低所必须</span></span><br><span class="line">            .setAutoCancel(<span class="literal">true</span>)<span class="comment">//通知查看后自动清除</span></span><br><span class="line">            .build()</span><br></pre></td></tr></table></figure></li><li><p>构建一个渠道 </p><p> 在下面代码，创建了一个id为<code>123</code>，name为<code>通知</code>的渠道，并使用通知管理器是系统服务中注册了这个渠道。</p> <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> channel = NotificationChannel(</span><br><span class="line">            <span class="string">"123"</span>,</span><br><span class="line">            <span class="string">"通知"</span>,</span><br><span class="line">            NotificationManager.IMPORTANCE_DEFAULT)</span><br><span class="line">            .apply &#123;  &#125;</span><br><span class="line"><span class="keyword">val</span> manager = getSystemService(Context.NOTIFICATION_SERVICE) <span class="keyword">as</span> NotificationManager</span><br><span class="line">    manager.createNotificationChannel(channel)</span><br></pre></td></tr></table></figure></li><li><p>发送通知</p><p> <code>notify()</code>的第一个参数是id，建议每次都不一样，后面我们需要通过id去操作这个通知。</p> <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">with(NotificationManagerCompat.from(<span class="keyword">this</span>))&#123;</span><br><span class="line">        notify(<span class="number">1</span>,notification)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="3-设置通知点击进入APP跳转页面"><a href="#3-设置通知点击进入APP跳转页面" class="headerlink" title="3. 设置通知点击进入APP跳转页面"></a>3. 设置通知点击进入APP跳转页面</h1><ol><li><p>和普通的Activity的跳转一样，需要新建一个<code>Intent</code>对象,因为我们Compose只有一个Activity，所以设置action是为了在<code>MainActivity</code>中去根据这个值去显示不同的UI，。</p> <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> intent = Intent(<span class="keyword">this</span>, MainActivity::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>).<span class="title">apply</span> </span>&#123;</span><br><span class="line">        flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK</span><br><span class="line">        action = <span class="string">"new"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在MainActivity的<code>onCreate()</code>中去判断action并设置显示的UI。</p> <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line"></span><br><span class="line">    setContent &#123;</span><br><span class="line">        MyNotifyTheme &#123;</span><br><span class="line">            <span class="keyword">when</span> (<span class="keyword">this</span>.intent.action)&#123;</span><br><span class="line">                <span class="string">"new"</span> -&gt; &#123;</span><br><span class="line">                    Text(text = <span class="string">"新的界面"</span>)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> -&gt;&#123;</span><br><span class="line">                    Button(onClick = &#123; <span class="keyword">this</span>.sendNotify(<span class="string">"hello"</span>, <span class="string">"123"</span>) &#125;,text = &#123; Text(text = <span class="string">"发送通知"</span>)&#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 安卓 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库并发控制优化</title>
      <link href="/2020/VBR358.html"/>
      <url>/2020/VBR358.html</url>
      
        <content type="html"><![CDATA[<hr><hr><h1 id="1-乐观锁方案"><a href="#1-乐观锁方案" class="headerlink" title="1. 乐观锁方案"></a>1. 乐观锁方案</h1><h1 id="2-悲观锁方案"><a href="#2-悲观锁方案" class="headerlink" title="2. 悲观锁方案"></a>2. 悲观锁方案</h1><h1 id="3-状态值方案"><a href="#3-状态值方案" class="headerlink" title="3. 状态值方案"></a>3. 状态值方案</h1><h1 id="4-缓存方案"><a href="#4-缓存方案" class="headerlink" title="4. 缓存方案"></a>4. 缓存方案</h1><h1 id="5-队列方案"><a href="#5-队列方案" class="headerlink" title="5. 队列方案"></a>5. 队列方案</h1>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JetPack Compose 安卓开发-新建项目</title>
      <link href="/2020/3W9CXS5.html"/>
      <url>/2020/3W9CXS5.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-什么是声明式UI"><a href="#1-什么是声明式UI" class="headerlink" title="1. 什么是声明式UI"></a>1. 什么是声明式UI</h1><p>在原来的安卓开发当中，需要现在xml声明UI，然后在程序里面findbyview取到这个view，再去进行命令式修改。在声明式UI中，我们不需要去编写xml文件，这是一种数据驱动UI的方式，当你数据发生改变，UI会随之改变，类似于数据绑定，和一些前端框架Vue等相似。</p><h1 id="2-JetPack-Compose介绍"><a href="#2-JetPack-Compose介绍" class="headerlink" title="2. JetPack Compose介绍"></a>2. JetPack Compose介绍</h1><p>Jetpack Compose是一个用于构建原生Android UI的现代工具包。Jetpack Compose使用更少的代码、强大的工具和直观的Kotlin api简化并加速了Android上的UI开发。</p><h1 id="3-新建项目"><a href="#3-新建项目" class="headerlink" title="3. 新建项目"></a>3. 新建项目</h1><p> 回到正题，接下来就是本文的关键部分，新建一个JetPack Compose项目。</p><ol><li>选择Empty Compose Activity</li></ol><p><img src="https://gitee.com/nieaowei/images/raw/master/1591082738_20200602152200176_1256573970.png" alt><br><img src="https://gitee.com/nieaowei/images/raw/master/1591084007_20200602153043245_995878397.png" alt><br>2. 编辑<code>Project</code>的<code>build.gradle</code>文件，在<code>buildscript</code>下添加或修改这几个参数。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ext.kotlin_version = <span class="string">'1.3.72'</span></span><br><span class="line">def compose_release_version = <span class="string">"dev12"</span></span><br><span class="line">ext.compose_version = <span class="string">"0.1.0-<span class="variable">$compose_release_version</span>"</span></span><br><span class="line">ext.compose_compiler_extension_version = <span class="string">"0.1.0-<span class="variable">$compose_release_version</span>"</span></span><br></pre></td></tr></table></figure><ol start="3"><li>编辑<code>Module</code>的<code>build.gradle</code>文件，在<code>plugins</code>下移除<code>id &#39;kotlin-android-extensions&#39;</code>。<br>在<code>android</code>下添加如下参数：</li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">composeOptions &#123;</span><br><span class="line">        kotlinCompilerVersion <span class="string">"1.3.70-dev-withExperimentalGoogleExtensions-20200424"</span></span><br><span class="line">        kotlinCompilerExtensionVersion <span class="string">"<span class="variable">$compose_compiler_extension_version</span>"</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>将<code>dependencies</code>替换为如下参数：</li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">implementation(<span class="string">"org.jetbrains.kotlin:kotlin-stdlib:<span class="subst">$&#123;kotlin_version&#125;</span>"</span>)</span><br><span class="line">implementation(<span class="string">"androidx.compose:compose-runtime:<span class="variable">$compose_version</span>"</span>)</span><br><span class="line">implementation(<span class="string">"androidx.ui:ui-core:<span class="variable">$compose_version</span>"</span>)</span><br><span class="line">implementation(<span class="string">"androidx.ui:ui-layout:<span class="variable">$compose_version</span>"</span>)</span><br><span class="line">implementation(<span class="string">"androidx.ui:ui-material:<span class="variable">$compose_version</span>"</span>)</span><br><span class="line">implementation(<span class="string">"androidx.ui:ui-material-icons-extended:<span class="variable">$compose_version</span>"</span>)</span><br><span class="line">implementation(<span class="string">"androidx.ui:ui-foundation:<span class="variable">$compose_version</span>"</span>)</span><br><span class="line">implementation(<span class="string">"androidx.ui:ui-animation:<span class="variable">$compose_version</span>"</span>)</span><br><span class="line">implementation <span class="string">"androidx.ui:ui-tooling:<span class="variable">$compose_version</span>"</span></span><br><span class="line">implementation(<span class="string">'androidx.appcompat:appcompat:1.1.0'</span>)</span><br><span class="line">implementation(<span class="string">'androidx.activity:activity-ktx:1.1.0'</span>)</span><br><span class="line">implementation <span class="string">"androidx.core:core-ktx:1.3.0"</span></span><br><span class="line">implementation <span class="string">'com.google.android.material:material:1.2.0-beta01'</span></span><br><span class="line">androidTestImplementation(<span class="string">"junit:junit:4.13"</span>)</span><br><span class="line">androidTestImplementation(<span class="string">"androidx.test:rules:1.2.0"</span>)</span><br><span class="line">androidTestImplementation(<span class="string">"androidx.test:runner:1.2.0"</span>)</span><br><span class="line">androidTestImplementation(<span class="string">"androidx.ui:ui-core:<span class="variable">$compose_version</span>"</span>)</span><br><span class="line">androidTestImplementation(<span class="string">"androidx.ui:ui-test:<span class="variable">$compose_version</span>"</span>)</span><br></pre></td></tr></table></figure><ol start="4"><li>构建项目。</li></ol><p><img src="https://gitee.com/nieaowei/images/raw/master/1591085468_20200602161059509_1290513126.png" alt></p><h1 id="4-附录"><a href="#4-附录" class="headerlink" title="4. 附录"></a>4. 附录</h1><h2 id="4-1-完整的Project-build-gradle"><a href="#4-1-完整的Project-build-gradle" class="headerlink" title="4.1. 完整的Project build.gradle"></a>4.1. 完整的Project build.gradle</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Top-level build file where you can add configuration options common to all sub-projects/modules.</span></span><br><span class="line">buildscript &#123;</span><br><span class="line">    ext.kotlin_version = <span class="string">'1.3.72'</span></span><br><span class="line">    def compose_release_version = <span class="string">"dev12"</span></span><br><span class="line">    ext.compose_version = <span class="string">"0.1.0-<span class="variable">$compose_release_version</span>"</span></span><br><span class="line">    ext.compose_compiler_extension_version = <span class="string">"0.1.0-<span class="variable">$compose_release_version</span>"</span></span><br><span class="line">    repositories &#123;</span><br><span class="line">        google()</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath <span class="string">"com.android.tools.build:gradle:4.1.0-alpha10"</span></span><br><span class="line">        classpath <span class="string">"org.jetbrains.kotlin:kotlin-gradle-plugin:<span class="variable">$kotlin_version</span>"</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// <span class="doctag">NOTE:</span> Do not place your application dependencies here; they belong</span></span><br><span class="line">        <span class="comment">// in the individual module build.gradle files</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        google()</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task clean(type: Delete) &#123;</span><br><span class="line">    delete rootProject.buildDir</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-2-完整的Module-build-gradle"><a href="#4-2-完整的Module-build-gradle" class="headerlink" title="4.2. 完整的Module build.gradle"></a>4.2. 完整的Module build.gradle</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">'com.android.application'</span></span><br><span class="line">    id <span class="string">'kotlin-android'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">29</span></span><br><span class="line"></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId <span class="string">"com.naw.notify"</span></span><br><span class="line">        minSdkVersion <span class="number">29</span></span><br><span class="line">        targetSdkVersion <span class="number">29</span></span><br><span class="line">        versionCode <span class="number">1</span></span><br><span class="line">        versionName <span class="string">"1.0"</span></span><br><span class="line"></span><br><span class="line">        testInstrumentationRunner <span class="string">"androidx.test.runner.AndroidJUnitRunner"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled <span class="literal">false</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android-optimize.txt'</span>), <span class="string">'proguard-rules.pro'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    compileOptions &#123;</span><br><span class="line">        sourceCompatibility JavaVersion.VERSION_1_8</span><br><span class="line">        targetCompatibility JavaVersion.VERSION_1_8</span><br><span class="line">    &#125;</span><br><span class="line">    kotlinOptions &#123;</span><br><span class="line">        jvmTarget = <span class="string">'1.8'</span></span><br><span class="line">    &#125;</span><br><span class="line">    buildFeatures &#123;</span><br><span class="line">        compose <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    composeOptions &#123;</span><br><span class="line">        kotlinCompilerVersion <span class="string">"1.3.70-dev-withExperimentalGoogleExtensions-20200424"</span></span><br><span class="line">        kotlinCompilerExtensionVersion <span class="string">"<span class="variable">$compose_compiler_extension_version</span>"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line"></span><br><span class="line">    implementation(<span class="string">"org.jetbrains.kotlin:kotlin-stdlib:<span class="subst">$&#123;kotlin_version&#125;</span>"</span>)</span><br><span class="line">    implementation(<span class="string">"androidx.compose:compose-runtime:<span class="subst">$&#123;compose_version&#125;</span>"</span>)</span><br><span class="line">    implementation(<span class="string">"androidx.ui:ui-core:<span class="variable">$compose_version</span>"</span>)</span><br><span class="line">    implementation(<span class="string">"androidx.ui:ui-layout:<span class="variable">$compose_version</span>"</span>)</span><br><span class="line">    implementation(<span class="string">"androidx.ui:ui-material:<span class="variable">$compose_version</span>"</span>)</span><br><span class="line">    implementation(<span class="string">"androidx.ui:ui-material-icons-extended:<span class="variable">$compose_version</span>"</span>)</span><br><span class="line">    implementation(<span class="string">"androidx.ui:ui-foundation:<span class="variable">$compose_version</span>"</span>)</span><br><span class="line">    implementation(<span class="string">"androidx.ui:ui-animation:<span class="variable">$compose_version</span>"</span>)</span><br><span class="line">    implementation <span class="string">"androidx.ui:ui-tooling:<span class="variable">$compose_version</span>"</span></span><br><span class="line">    implementation(<span class="string">'androidx.appcompat:appcompat:1.1.0'</span>)</span><br><span class="line">    implementation(<span class="string">'androidx.activity:activity-ktx:1.1.0'</span>)</span><br><span class="line">    implementation <span class="string">"androidx.core:core-ktx:1.3.0"</span></span><br><span class="line"></span><br><span class="line">    implementation <span class="string">'com.google.android.material:material:1.2.0-beta01'</span></span><br><span class="line"></span><br><span class="line">    androidTestImplementation(<span class="string">"junit:junit:4.13"</span>)</span><br><span class="line">    androidTestImplementation(<span class="string">"androidx.test:rules:1.2.0"</span>)</span><br><span class="line">    androidTestImplementation(<span class="string">"androidx.test:runner:1.2.0"</span>)</span><br><span class="line">    androidTestImplementation(<span class="string">"androidx.ui:ui-core:<span class="variable">$compose_version</span>"</span>)</span><br><span class="line">    androidTestImplementation(<span class="string">"androidx.ui:ui-test:<span class="variable">$compose_version</span>"</span>)</span><br><span class="line"></span><br><span class="line">    implementation <span class="string">'com.github.salomonbrys.kotson:kotson:2.5.0'</span></span><br><span class="line">    implementation <span class="string">'com.github.kittinunf.fuel:fuel:2.2.2'</span></span><br><span class="line"></span><br><span class="line">    implementation <span class="string">'com.beust:klaxon:5.0.1'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Android </tag>
            
            <tag> Kotlin </tag>
            
            <tag> 安卓 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go语言详解网络代理</title>
      <link href="/2020/8BV7RJ.html"/>
      <url>/2020/8BV7RJ.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-网络代理介绍"><a href="#1-网络代理介绍" class="headerlink" title="1. 网络代理介绍"></a>1. 网络代理介绍</h1><h2 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1. 概念"></a>1.1. 概念</h2><ul><li><p>用户通过代理请求信息</p></li><li><p>请求通过网络代理完成转发到达目标服务器</p></li><li><p>目标服务器响应后再通过网络代理回传给用户</p><p><img src="https://gitee.com/nieaowei/images/raw/master/blog/image-20200517142753200.png" alt="image-20200517142753200"></p></li></ul><h2 id="1-2-类型"><a href="#1-2-类型" class="headerlink" title="1.2. 类型"></a>1.2. 类型</h2><h3 id="1-2-1-按需求"><a href="#1-2-1-按需求" class="headerlink" title="1.2.1. 按需求"></a>1.2.1. 按需求</h3><ul><li><p>正向代理</p><p>客户端代理技术，帮助客户服务无法访问的资源。如：VPN、浏览器的Web代理等。</p></li><li><p>反向带代理</p><p>服务端代理技术，帮助服务器做负载均衡、缓存、提供安全校验等，可以隐藏服务器真实IP。如：lvs、niginx代理等。</p></li></ul><h3 id="1-2-2-按协议"><a href="#1-2-2-按协议" class="headerlink" title="1.2.2. 按协议"></a>1.2.2. 按协议</h3><ul><li>HTTP/HTTPS代理</li><li>WebSocket代理</li><li>TCP代理</li></ul><h1 id="2-相关代理的实现"><a href="#2-相关代理的实现" class="headerlink" title="2. 相关代理的实现"></a>2. 相关代理的实现</h1><h2 id="2-1-HTTP正向代理的实现"><a href="#2-1-HTTP正向代理的实现" class="headerlink" title="2.1.  HTTP正向代理的实现"></a>2.1.  HTTP正向代理的实现</h2><h3 id="2-1-1-实现流程"><a href="#2-1-1-实现流程" class="headerlink" title="2.1.1. 实现流程"></a>2.1.1. 实现流程</h3><ol><li>代理接收客户端请求，复制原请求对象，根据数据配置新请求各种参数。</li><li>把新请求发送到真实的服务端。并接收到服务器端返回。</li><li>代理服务器做相应的一些出来，然后返回给客户端。</li></ol><p><img src="https://gitee.com/nieaowei/images/raw/master/blog/image-20200517143518742.png" alt="image-20200517143518742"></p><h3 id="2-1-2-实现代码"><a href="#2-1-2-实现代码" class="headerlink" title="2.1.2. 实现代码"></a>2.1.2. 实现代码</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io"</span></span><br><span class="line"><span class="string">"net"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Proxy <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Proxy)</span> <span class="title">ServeHTTP</span><span class="params">(rw http.ResponseWriter, req *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Rec req %s %s %s \n"</span>, req.Method, req.Host, req.RemoteAddr)</span><br><span class="line">trans := http.DefaultTransport</span><br><span class="line">outReq := <span class="built_in">new</span>(http.Request)</span><br><span class="line">*outReq = *req</span><br><span class="line"><span class="keyword">if</span> clientIP, _, err := net.SplitHostPort(req.RemoteAddr); err == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> prior, ok := outReq.Header[<span class="string">"X-Forwarded-For"</span>]; ok &#123;</span><br><span class="line">clientIP = strings.Join(prior, <span class="string">", "</span>) + <span class="string">", "</span> + clientIP</span><br><span class="line">&#125;</span><br><span class="line">outReq.Header.Set(<span class="string">"X-Forwarded-For"</span>, clientIP)</span><br><span class="line">&#125;</span><br><span class="line">res, err := trans.RoundTrip(outReq)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">rw.WriteHeader(http.StatusBadGateway)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> s, i := <span class="keyword">range</span> res.Header &#123;</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> i &#123;</span><br><span class="line">rw.Header().Add(s, v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">rw.WriteHeader(res.StatusCode)</span><br><span class="line">io.Copy(rw, res.Body)</span><br><span class="line">res.Body.Close()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"sever on :8080"</span>)</span><br><span class="line">http.Handle(<span class="string">"/"</span>, &amp;Proxy&#123;&#125;)</span><br><span class="line">http.ListenAndServe(<span class="string">"0.0.0.0:8080"</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-网络代理相关疑惑"><a href="#3-网络代理相关疑惑" class="headerlink" title="3. 网络代理相关疑惑"></a>3. 网络代理相关疑惑</h1><ol><li><p>网络代理和网络转发的区别</p><p>网络转发</p><p>​    是路由器对报文进行转发。</p><p><img src="https://gitee.com/nieaowei/images/raw/master/blog/image-20200517142722004.png" alt="image-20200517142722004"></p><p>网络代理</p><p>​    用户不直接连接服务器，网络代理服务器去连接。</p><p><img src="https://gitee.com/nieaowei/images/raw/master/blog/image-20200517142753200.png" alt="image-20200517142753200"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Go语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> Go语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go语言Tcp和Udp使用实例</title>
      <link href="/2020/94VGB6.html"/>
      <url>/2020/94VGB6.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-创建客户端"><a href="#1-创建客户端" class="headerlink" title="1. 创建客户端"></a>1. 创建客户端</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"net"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">conn,err := net.DialUDP(<span class="string">"udp"</span>,<span class="literal">nil</span>,&amp;net.UDPAddr&#123;</span><br><span class="line">IP: net.IPv4(<span class="number">127</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>),</span><br><span class="line">Port: <span class="number">9090</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err!=<span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ &#123;</span><br><span class="line"><span class="comment">// 向服务器发送消息</span></span><br><span class="line">_,err=conn.Write([]<span class="keyword">byte</span>(<span class="string">"hello"</span>))</span><br><span class="line"><span class="keyword">if</span> err!=<span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 从服务器读取消息</span></span><br><span class="line">res := <span class="built_in">make</span>([]<span class="keyword">byte</span>,<span class="number">1024</span>)</span><br><span class="line">n,addr,err := conn.ReadFromUDP(res)</span><br><span class="line"><span class="keyword">if</span> err!=<span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(addr,n,<span class="keyword">string</span>(res[:n]))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-创建服务端"><a href="#2-创建服务端" class="headerlink" title="2. 创建服务端"></a>2. 创建服务端</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"net"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">conn,err := net.ListenUDP(<span class="string">"udp"</span>,&amp;net.UDPAddr&#123;</span><br><span class="line">IP:   net.IPv4(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>),</span><br><span class="line">Port: <span class="number">9090</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>&#123;</span><br><span class="line">data := <span class="built_in">make</span>([]<span class="keyword">byte</span>,<span class="number">1024</span>)</span><br><span class="line"><span class="comment">// 从客户端读取消息</span></span><br><span class="line">n,addr,err := conn.ReadFromUDP(data)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(addr,<span class="keyword">string</span>(data[:n]),n)</span><br><span class="line"><span class="comment">// 向客户端发送消息</span></span><br><span class="line">_,err = conn.WriteToUDP(data[:n],addr)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Go语言 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>网络开发基础</title>
      <link href="/2020/1TTQ6FN.html"/>
      <url>/2020/1TTQ6FN.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-OSI七层网络模型"><a href="#1-OSI七层网络模型" class="headerlink" title="1 OSI七层网络模型"></a>1 OSI七层网络模型</h2><p><img src="https://gitee.com/nieaowei/images/raw/master/blog/image-20200516112645295.png" alt="image-20200516112645295"></p><h2 id="2-协议与数据包"><a href="#2-协议与数据包" class="headerlink" title="2 协议与数据包"></a>2 协议与数据包</h2><h3 id="2-1-TCP-IP"><a href="#2-1-TCP-IP" class="headerlink" title="2.1 TCP/IP"></a>2.1 TCP/IP</h3><h4 id="2-1-1-结构"><a href="#2-1-1-结构" class="headerlink" title="2.1.1 结构"></a>2.1.1 结构</h4><p><img src="https://gitee.com/nieaowei/images/raw/master/blog/image-20200516112848449.png" alt="image-20200516112848449"></p><p><img src="https://gitee.com/nieaowei/images/raw/master/blog/image-20200516112915642.png" alt="image-20200516112915642"></p><h4 id="2-1-2-握手机制"><a href="#2-1-2-握手机制" class="headerlink" title="2.1.2 握手机制"></a>2.1.2 握手机制</h4><p>保证可靠性，双工性。</p><ol><li>三次握手</li></ol><p>   <img src="https://gitee.com/nieaowei/images/raw/master/blog/image-20200516114321934.png" alt="image-20200516114321934"></p><ol start="2"><li><p>四次挥手</p><p><img src="https://gitee.com/nieaowei/images/raw/master/blog/image-20200516114520417.png" alt="image-20200516114520417"></p></li></ol><h4 id="2-1-3-常见疑问"><a href="#2-1-3-常见疑问" class="headerlink" title="2.1.3 常见疑问"></a>2.1.3 常见疑问</h4><ol><li>为什么需要等待2MSL？<ul><li>保证全双工连接可靠关闭</li><li>保证这次连接从网络消失</li></ul></li><li>为什么会出现大量close wait?<ul><li>出现在被动关闭方</li><li>并发请求太多</li><li>被动关闭未及时释放端口资源</li></ul></li><li>TCP为什么需要流量控制？<ul><li>网速不同，通讯双方任一方发送过快导致消息处理不过来，需要缓冲区。</li><li>如果缓冲区满了，发送方还在发送，就会丢包。</li></ul></li><li>TCP为什么需要拥塞控制？<ul><li>接收方网络资源繁忙，未及时响应ACK导致发送方重传大量数据，导致拥堵。</li><li>动态调整缓冲区大小。</li><li>慢开始拥塞避免-&gt;快速重传和快恢复</li></ul></li><li>为什么或出现粘包和拆包？<ul><li>粘包-多个数据包合并。</li><li>拆包-一个数据表拆分成多个。</li><li>写入数据大于套接字缓冲区大小，拆包。</li><li>写入数据小于淘集集缓冲区大小，粘包。</li><li>进行最大报文长度大小的TCP分段，TCP报文长度-TCP头部长&gt;最大报文长度 ，拆包。</li><li>接收不及时读取套接字缓冲区数据。粘包。</li></ul></li><li>如何获取完整应用数据报文？<ul><li>使用带消息头的协议，头部写入包长度。</li><li>设置定长消息，长度不够补固定字。</li><li>设置消息编辑，一般是是‘\n’</li><li>Protobuf、Json等</li></ul></li></ol><h3 id="2-2-HTTP"><a href="#2-2-HTTP" class="headerlink" title="2.2 HTTP"></a>2.2 HTTP</h3><ol><li><p>请求</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/</span> HTTP/1.1</span><br><span class="line"><span class="attribute">HOST</span>: www.example.com</span><br><span class="line"><span class="attribute">User-Agent</span>: curl/7.55.1</span><br><span class="line"><span class="attribute">Accept</span>: */*</span><br></pre></td></tr></table></figure></li><li><p>响应</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Accept-Ranges</span>: bytes</span><br><span class="line"><span class="attribute">Cache-Control</span>: private,no-cache,no-store</span><br><span class="line"><span class="attribute">Connection</span>: keep-alive</span><br><span class="line"><span class="attribute">Content-Lenth</span>: 2381</span><br><span class="line"><span class="attribute">Content-Type</span>: text/html</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-3-Websocket"><a href="#2-3-Websocket" class="headerlink" title="2.3 Websocket"></a>2.3 Websocket</h3><ol><li><p>请求</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/chat</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: www.example.com</span><br><span class="line"><span class="attribute">Upgrade</span>: websocket</span><br><span class="line"><span class="attribute">Connection</span>: Upgrade</span><br><span class="line"><span class="attribute">Sec-WebSocket-Key</span>: asdqwehdiuhaskdhh123akjhd</span><br></pre></td></tr></table></figure></li><li><p>响应</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">101</span> Switching Protocols</span><br><span class="line"><span class="attribute">Upgrade</span>: websocket</span><br><span class="line"><span class="attribute">Connection</span>: Upgrade</span><br><span class="line"><span class="attribute">Sec-WebSocket-Accept</span>: sasdkbkjbkbdasdqw24ade</span><br><span class="line"><span class="attribute">Sec-WebSocket-Protocol</span>: chat</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 杂文 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JetPack Compose 安卓开发-有序广播</title>
      <link href="/2020/3SHXKRR.html"/>
      <url>/2020/3SHXKRR.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker-Etcd集群搭建</title>
      <link href="/2020/1M052X8.html"/>
      <url>/2020/1M052X8.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-三节点集群"><a href="#1-三节点集群" class="headerlink" title="1. 三节点集群"></a>1. 三节点集群</h1><h2 id="1-1-新建一个Docker网桥"><a href="#1-1-新建一个Docker网桥" class="headerlink" title="1.1 新建一个Docker网桥"></a>1.1 新建一个Docker网桥</h2><p>在集群中，服务器的ip或者说节点的ip应该是固定的静态ip地址，而由于docker默认网桥不支持自定义ip地址，所以需要自行增加一个网桥。</p><p><code>docker network create --driver bridge --subnet=172.18.0.0/16 etcd-bridge</code></p><h2 id="1-2-集群脚本"><a href="#1-2-集群脚本" class="headerlink" title="1.2 集群脚本"></a>1.2 集群脚本</h2><p>在脚本运行前，必须先拉去镜像，这里使用的是3.4.5版本的etcd，<code>docker pull gcr.io/etcd-development/etcd:v3.4.5</code>.</p><p>节点的ip是在docker容器内的ip不是在本地网络上的ip，主机使用节点ip是无法与其通信的，要将端口映射出来使用。</p><p>节点1：内部为172.18.0.2:2379，主机访问映射为:127.0.0.1:1802</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">  -p 1802:2379 \</span><br><span class="line">  -p 1803:2380 \</span><br><span class="line">  --mount type=bind,source=/Users/nieaowei/Desktop/data/etcd/node1.tmp,destination=/etcd-data \</span><br><span class="line">  --name etcd-gcr-v3.4.5-node1 \</span><br><span class="line">  --network etcd-bridge --ip 172.18.0.2 \</span><br><span class="line">  -d gcr.io/etcd-development/etcd:v3.4.5 \</span><br><span class="line">  /usr/local/bin/etcd \</span><br><span class="line">  --name s1 \</span><br><span class="line">  --data-dir /etcd-data \</span><br><span class="line">  --listen-client-urls http://0.0.0.0:2379 \</span><br><span class="line">  --advertise-client-urls http://172.18.0.2:2379 \</span><br><span class="line">  --listen-peer-urls http://0.0.0.0:2380 \</span><br><span class="line">  --initial-advertise-peer-urls http://172.18.0.2:2380 \</span><br><span class="line">  --initial-cluster s1=http://172.18.0.2:2380,s2=http://172.18.0.4:2380,s3=http://172.18.0.6:2380 \</span><br><span class="line">  --initial-cluster-token tkn \</span><br><span class="line">  --initial-cluster-state new \</span><br><span class="line">  --log-level info \</span><br><span class="line">  --logger zap \</span><br><span class="line">  --log-outputs stderr &amp;&amp; \</span><br><span class="line"> docker run \</span><br><span class="line">  -p 1804:2379 \</span><br><span class="line">  -p 1805:2380 \</span><br><span class="line">  --mount type=bind,source=/Users/nieaowei/Desktop/data/etcd/node2.tmp,destination=/etcd-data \</span><br><span class="line">  --name etcd-gcr-v3.4.5-node2 \</span><br><span class="line">  --network etcd-bridge --ip 172.18.0.4 \</span><br><span class="line">  -d gcr.io/etcd-development/etcd:v3.4.5 \</span><br><span class="line">  /usr/local/bin/etcd \</span><br><span class="line">  --name s2 \</span><br><span class="line">  --data-dir /etcd-data \</span><br><span class="line">  --listen-client-urls http://0.0.0.0:2379 \</span><br><span class="line">  --advertise-client-urls http://172.18.0.4:2379 \</span><br><span class="line">  --listen-peer-urls http://0.0.0.0:2380 \</span><br><span class="line">  --initial-advertise-peer-urls http://172.18.0.4:2380 \</span><br><span class="line">  --initial-cluster s1=http://172.18.0.2:2380,s2=http://172.18.0.4:2380,s3=http://172.18.0.6:2380 \</span><br><span class="line">  --initial-cluster-token tkn \</span><br><span class="line">  --initial-cluster-state new \</span><br><span class="line">  --log-level info \</span><br><span class="line">  --logger zap \</span><br><span class="line">  --log-outputs stderr &amp;&amp; \</span><br><span class="line"> docker run \</span><br><span class="line">  -p 1806:2379 \</span><br><span class="line">  -p 1807:2380 \</span><br><span class="line">  --mount type=bind,source=/Users/nieaowei/Desktop/data/etcd/node3.tmp,destination=/etcd-data \</span><br><span class="line">  --name etcd-gcr-v3.4.5-node3 \</span><br><span class="line">  --network etcd-bridge --ip 172.18.0.6 \</span><br><span class="line">  -d gcr.io/etcd-development/etcd:v3.4.5 \</span><br><span class="line">  /usr/local/bin/etcd \</span><br><span class="line">  --name s3 \</span><br><span class="line">  --data-dir /etcd-data \</span><br><span class="line">  --listen-client-urls http://0.0.0.0:2379 \</span><br><span class="line">  --advertise-client-urls http://172.18.0.6:2379 \</span><br><span class="line">  --listen-peer-urls http://0.0.0.0:2380 \</span><br><span class="line">  --initial-advertise-peer-urls http://172.18.0.6:2380 \</span><br><span class="line">  --initial-cluster s1=http://172.18.0.2:2380,s2=http://172.18.0.4:2380,s3=http://172.18.0.6:2380 \</span><br><span class="line">  --initial-cluster-token tkn \</span><br><span class="line">  --initial-cluster-state new \</span><br><span class="line">  --log-level info \</span><br><span class="line">  --logger zap \</span><br><span class="line">  --log-outputs stderr</span><br></pre></td></tr></table></figure><h2 id="1-3-查看集群状态"><a href="#1-3-查看集群状态" class="headerlink" title="1.3 查看集群状态"></a>1.3 查看集群状态</h2><ol><li><p>设置API版本为3</p><p> 在进行客户端操作之前必须设置API版本。</p><p> <code>export ETCDCTL_API=3</code></p></li><li><p>查看集群成员列表，可以在集群内任意一台服务器，或者使用集群内任意一个入口点（endpoint）查看。</p><p> <code>etcdctl --endpoints=http://127.0.0.1:1802  member list -w table</code><br> <img src="https://gitee.com/nieaowei/images/raw/master/blog/20200419232828.png" alt></p></li><li><p>查看集群成员状态</p><p> <code>etcdctl --endpoints=http://127.0.0.1:1802,http://127.0.0.1:1804,http://127.0.0.1:1806 endpoint status -w table</code></p><p> <img src="https://gitee.com/nieaowei/images/raw/master/blog/20200419232052.png" alt></p></li></ol><h2 id="1-4-验证集群"><a href="#1-4-验证集群" class="headerlink" title="1.4 验证集群"></a>1.4 验证集群</h2><ol><li><p>在节点1写入键值对 test 1234。</p><p> <code>etcdctl --endpoint=127.0.0.1:1802 put test 123</code></p></li><li><p>在节点2读取该键值。</p><p> <code>etcdctl --endpoint=127.0.0.1:1804 get test</code></p><p> <img src="https://gitee.com/nieaowei/images/raw/master/blog/20200419234210.png" alt></p></li></ol><h1 id="2-集群扩容"><a href="#2-集群扩容" class="headerlink" title="2. 集群扩容"></a>2. 集群扩容</h1><p>在上述三节点中进行扩容，即增加一个节点。</p><ol><li><p>使用etcdctl增加一个集群成员。</p><p> <code>etcdctl --endpoints=http://127.0.0.1:1802,http://127.0.0.1:1804,http://127.0.0.1:1806 member add s4 --peer-urls=http://172.18.0.8:2380</code></p><p> <img src="https://gitee.com/nieaowei/images/raw/master/blog/20200419231345.png" alt></p></li><li><p>启动一个节点doker容器,初始化集群状态设置为existing。</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">-p 1808:2379 \</span><br><span class="line">-p 1809:2380 \</span><br><span class="line">--mount type=bind,source=/Users/nieaowei/Desktop/data/etcd/node4.tmp,destination=/etcd-data \</span><br><span class="line">--name etcd-gcr-v3.4.5-node4 \</span><br><span class="line">--network etcd-bridge --ip 172.18.0.8 \</span><br><span class="line">-d gcr.io/etcd-development/etcd:v3.4.5 \</span><br><span class="line">/usr/local/bin/etcd \</span><br><span class="line">--name s4 \</span><br><span class="line">--data-dir /etcd-data \</span><br><span class="line">--listen-client-urls http://0.0.0.0:2379 \</span><br><span class="line">--advertise-client-urls http://172.18.0.8:2379 \</span><br><span class="line">--listen-peer-urls http://0.0.0.0:2380 \</span><br><span class="line">--initial-advertise-peer-urls http://172.18.0.8:2380 \</span><br><span class="line">--initial-cluster s1=http://172.18.0.2:2380,s2=http://172.18.0.4:2380,s3=http://172.18.0.6:2380,s4=http://172.18.0.8:2380 \</span><br><span class="line">--initial-cluster-token tkn \</span><br><span class="line">--initial-cluster-state existing \</span><br><span class="line">--log-level info \</span><br><span class="line">--logger zap \</span><br><span class="line">--log-outputs stderr</span><br></pre></td></tr></table></figure></li><li><p>查看集群成员。</p><p> <code>etcdctl --endpoints=http://127.0.0.1:1802  member list -w table</code></p><p> <img src="https://gitee.com/nieaowei/images/raw/master/blog/20200419232828.png" alt></p></li><li><p>查看集群状态。</p><p> <code>etcdctl --endpoints=http://127.0.0.1:1802,http://127.0.0.1:1804,http://127.0.0.1:1806,http://127.0.0.1:1808 endpoint status -w table</code></p><p> <img src="https://gitee.com/nieaowei/images/raw/master/blog/20200419233241.png" alt></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Etcd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sql语句学习</title>
      <link href="/2020/3FRKW3J.html"/>
      <url>/2020/3FRKW3J.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-SQL分类"><a href="#1-SQL分类" class="headerlink" title="1. SQL分类"></a>1. SQL分类</h2><ul><li>DDL 数据定义</li><li>TPL 事务处理</li><li>DCL 数据控制</li><li>DML 数据操作<ul><li>SELECT</li><li>INSERT</li><li>UPDATE</li><li>DELETE</li></ul></li></ul><h2 id="2-Jion操作"><a href="#2-Jion操作" class="headerlink" title="2. Jion操作"></a>2. Jion操作</h2><h3 id="2-1-INNER内连接"><a href="#2-1-INNER内连接" class="headerlink" title="2.1 INNER内连接"></a>2.1 INNER内连接</h3><h3 id="2-2-FULL-OUTER全外连接"><a href="#2-2-FULL-OUTER全外连接" class="headerlink" title="2.2 FULL OUTER全外连接"></a>2.2 FULL OUTER全外连接</h3><h3 id="2-3-LEFT-OUTER左外连接"><a href="#2-3-LEFT-OUTER左外连接" class="headerlink" title="2.3 LEFT OUTER左外连接"></a>2.3 LEFT OUTER左外连接</h3><h3 id="2-4-RIGHT-OUTER右外连接"><a href="#2-4-RIGHT-OUTER右外连接" class="headerlink" title="2.4 RIGHT OUTER右外连接"></a>2.4 RIGHT OUTER右外连接</h3><h3 id="2-5-CROSS交叉连接"><a href="#2-5-CROSS交叉连接" class="headerlink" title="2.5 CROSS交叉连接"></a>2.5 CROSS交叉连接</h3><h2 id="3-注意"><a href="#3-注意" class="headerlink" title="3. 注意"></a>3. 注意</h2><ul><li>not in操作不会使用索引，使用外连接</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Mysql数据库问题优化总结</title>
      <link href="/2020/65SJMT.html"/>
      <url>/2020/65SJMT.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-性能指标"><a href="#1-性能指标" class="headerlink" title="1. 性能指标"></a>1. 性能指标</h2><ul><li>QPS-每秒查询书</li><li>TPS-吞吐量</li><li>并发量-同一时间处理请求的数量</li><li>CPU使用率</li><li>磁盘IO</li></ul><h2 id="2-影响数据库性能的问题"><a href="#2-影响数据库性能的问题" class="headerlink" title="2. 影响数据库性能的问题"></a>2. 影响数据库性能的问题</h2><h3 id="2-1-大表问题"><a href="#2-1-大表问题" class="headerlink" title="2.1 大表问题"></a>2.1 大表问题</h3><ol><li>定义<ul><li>记录数巨大，单表千万行</li><li>表数据文件巨大。单表超过10G</li><li>较少删除和查询时影响不大。</li></ul></li><li>问题<ul><li>慢查询：很难再一定时间内过滤所需数据</li><li>建立索引时长长、Mysql5.5会锁表，Mysql5.5以上会造成主从延迟</li><li>修改表结构需要长时间锁表，会造成主从延迟，影响正常的数据操作（阻塞该表访问）</li></ul></li><li>解决方案<ul><li>分库分表，把大表分成多个小表<br>  分表主键选择<br>  分表跨分区数据的查询和统计</li><li>历史数据归档，可减少后端业务影响<br>  归档时间点的选择（不会被使用，很少被使用）<br>  如何归档</li></ul></li></ol><h3 id="2-2-大事务问题"><a href="#2-2-大事务问题" class="headerlink" title="2.2 大事务问题"></a>2.2 大事务问题</h3><ol><li>事务定义<ul><li>一组具有原子性的sql语句，要么全成功，要么全失败</li><li>一致性，事务不会破坏数据库数据完整性</li><li>隔离性，事务未提交时，操作对其他事务是不可见的<ul><li>未提交读，不建议使用</li><li>已提交读，</li><li>可重复读，</li><li>可串行化，很少使用，严格数据一致性</li></ul></li></ul></li><li>大事务定义<ul><li>运行时间长，操作数据多</li></ul></li><li>问题<ul><li>锁定数据太多，造成大量的阻塞和锁超时。</li><li>回滚时间长，在此期间，依然数据锁定</li><li>执行时间长，造成主从延迟</li></ul></li><li>解决方案<ul><li>避免处理太多数据，分批处理</li><li>移除不必要的select</li></ul></li></ol><p>远程备份计划</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gin框架-请求数据验证</title>
      <link href="/2020/DCQQ72.html"/>
      <url>/2020/DCQQ72.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-简单示例"><a href="#1-简单示例" class="headerlink" title="1. 简单示例"></a>1. 简单示例</h2><p>在结果字段后添加上binding键中添加required验证，required为必填验证。 </p><ol><li><p>代码</p> <figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="keyword">string</span> <span class="string">`form:"name" binding:"required"`</span></span><br><span class="line">    Age  <span class="keyword">int</span>    <span class="string">`form:"age" binding:"required"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ginRouter := gin.Default()</span><br><span class="line">    ginRouter.POST(</span><br><span class="line">        <span class="string">"/test"</span>,</span><br><span class="line">        <span class="function"><span class="keyword">func</span><span class="params">(context *gin.Context)</span></span> &#123;</span><br><span class="line">            <span class="keyword">var</span> stu Student</span><br><span class="line">            err := context.ShouldBind(&amp;stu)</span><br><span class="line">            <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">                context.JSON(<span class="number">400</span>, err.Error())</span><br><span class="line">                context.Abort()</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            context.JSON(<span class="number">200</span>,stu)</span><br><span class="line">        &#125;,</span><br><span class="line">    )</span><br><span class="line">    ginRouter.Run(<span class="string">":8088"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>错误测试结果，如果有字段未填bind则会报错，告诉你有字段未填写。</p><p> <img src="https://gitee.com/nieaowei/images/raw/master/blog/20200409130856.png" alt><br> <img src="https://gitee.com/nieaowei/images/raw/master/blog/20200409130910.png" alt></p></li><li><p>正确测试结果</p><p> <img src="https://gitee.com/nieaowei/images/raw/master/blog/20200409130952.png" alt><br> <img src="https://gitee.com/nieaowei/images/raw/master/blog/20200409131004.png" alt></p></li></ol><h2 id="2-跨字段验证"><a href="#2-跨字段验证" class="headerlink" title="2. 跨字段验证"></a>2. 跨字段验证</h2><ul><li>eqfield/与某字段相等</li><li>nefield/不等于某字段</li><li>gtfield/大于某字段</li><li>gtefield/大于或等于某字段</li><li>ltfield/小于某字段</li><li>ltefield/小于或等于某字段</li></ul><ol><li><p>代码如下，main函数代码与上面一致</p> <figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="keyword">string</span> <span class="string">`form:"name" binding:"required"`</span></span><br><span class="line">    Age  <span class="keyword">int</span>    <span class="string">`form:"age" binding:"required"`</span></span><br><span class="line">    Age2 <span class="keyword">int</span><span class="string">`form:"age2" binding:"required,gtefield=Age"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>验证失败结果</p><p> 与上面一致，bind函数会报错验证失败的错误。</p><p> <img src="https://gitee.com/nieaowei/images/raw/master/blog/20200409132625.png" alt><br> <img src="https://gitee.com/nieaowei/images/raw/master/blog/20200409132641.png" alt></p></li><li><p>验证成功结果</p><p> <img src="https://gitee.com/nieaowei/images/raw/master/blog/20200409132508.png" alt><br> <img src="https://gitee.com/nieaowei/images/raw/master/blog/20200409132538.png" alt></p></li></ol><h2 id="3-跨结构体验证"><a href="#3-跨结构体验证" class="headerlink" title="3. 跨结构体验证"></a>3. 跨结构体验证</h2><ul><li>eqcsfield/与内嵌结构体字段中的某字段相等</li><li>necsfield/与内嵌结构体字段中的某字段不等</li><li>gtcsfield/大于内嵌结构体字段中的某字段</li><li>ftecsfield/大于等于内嵌结构体字段中的某字段</li><li>ltcsfield/小于内嵌结构体字段中的某字段</li><li>ltecsfield/小于等于内嵌结构体字段中的某字段</li><li>containsfield/包含内嵌结构体的某字段</li></ul><ol><li><p>代码如下</p> <figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Parent <span class="keyword">struct</span> &#123;</span><br><span class="line"> Age <span class="keyword">int</span> <span class="string">`form:"age" binding:"required"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="keyword">string</span> <span class="string">`form:"name" binding:"required"`</span></span><br><span class="line">    Age  <span class="keyword">int</span>    <span class="string">`form:"age" binding:"required"`</span></span><br><span class="line">    Age2 <span class="keyword">int</span><span class="string">`form:"age2" binding:"required,ltcsfield=Parent.Age"`</span></span><br><span class="line">    Parent Parent <span class="string">`form:"parent" binding:"required"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>验证失败，当提交的数据父母的年龄小于学生的年龄时</p><p> <img src="https://gitee.com/nieaowei/images/raw/master/blog/20200409133335.png" alt><br> <img src="https://gitee.com/nieaowei/images/raw/master/blog/20200409133346.png" alt></p></li><li><p>验证成功</p><p> <img src="https://gitee.com/nieaowei/images/raw/master/blog/20200409133215.png" alt><br> <img src="https://gitee.com/nieaowei/images/raw/master/blog/20200409133232.png" alt></p></li></ol><h2 id="4-自定义验证器"><a href="#4-自定义验证器" class="headerlink" title="4. 自定义验证器"></a>4. 自定义验证器</h2><h3 id="4-1-自定义验证器格式"><a href="#4-1-自定义验证器格式" class="headerlink" title="4.1 自定义验证器格式"></a>4.1 自定义验证器格式</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">customFunc</span><span class="params">(fl validator.FieldLevel)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> whatever &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">validate := binding.Validator.Engine().(*validator.Validate)</span><br><span class="line">validate.RegisterValidation(<span class="string">"custom tag name"</span>, customFunc)</span><br></pre></td></tr></table></figure><p>对于validator.FieldLevel的解释</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> FieldLevel <span class="keyword">interface</span> &#123;</span><br><span class="line">    <span class="comment">// 返回顶层结构体</span></span><br><span class="line">    Top() reflect.Value</span><br><span class="line">    <span class="comment">// 返回上一层结构体</span></span><br><span class="line">    Parent() reflect.Value</span><br><span class="line">    <span class="comment">// 被标记的当前字段</span></span><br><span class="line">    Field() reflect.Value</span><br><span class="line">    <span class="comment">// 当前字段名称</span></span><br><span class="line">    FieldName() <span class="keyword">string</span></span><br><span class="line">    <span class="comment">// 返回当前字段结构体名称</span></span><br><span class="line">    StructFieldName() <span class="keyword">string</span></span><br><span class="line">    <span class="comment">// 验证标签后面的参数</span></span><br><span class="line">    Param() strin</span><br><span class="line">    <span class="comment">// 验证标签名称</span></span><br><span class="line">    GetTag() <span class="keyword">string</span></span><br><span class="line">    ExtractType(field reflect.Value) (value reflect.Value, kind reflect.Kind, nullable <span class="keyword">bool</span>)</span><br><span class="line">    GetStructFieldOK() (reflect.Value, reflect.Kind, <span class="keyword">bool</span>)</span><br><span class="line">    GetStructFieldOKAdvanced(val reflect.Value, namespace <span class="keyword">string</span>) (reflect.Value, reflect.Kind, <span class="keyword">bool</span>)</span><br><span class="line">    GetStructFieldOK2() (reflect.Value, reflect.Kind, <span class="keyword">bool</span>, <span class="keyword">bool</span>)</span><br><span class="line">    GetStructFieldOKAdvanced2(val reflect.Value, namespace <span class="keyword">string</span>) (reflect.Value, reflect.Kind, <span class="keyword">bool</span>, <span class="keyword">bool</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-简单示例"><a href="#4-2-简单示例" class="headerlink" title="4.2 简单示例"></a>4.2 简单示例</h3><p>实现了Age2值必须大于Age的验证规则</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line">    <span class="string">"github.com/gin-gonic/gin/binding"</span></span><br><span class="line">    <span class="string">"github.com/go-playground/validator/v10"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="keyword">string</span> <span class="string">`form:"name" binding:"required,lte=3"`</span></span><br><span class="line">    Age  <span class="keyword">int</span>    <span class="string">`form:"age" binding:"required"`</span></span><br><span class="line">    Age2 <span class="keyword">int</span><span class="string">`form:"age2" binding:"required,custom"`</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">customFunc</span><span class="params">(fl validator.FieldLevel)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="comment">// 被标记的当前字段数据</span></span><br><span class="line">    age2 := fl.Field().Interface().(<span class="keyword">int</span>)</span><br><span class="line">    <span class="comment">// 要拿到同级字段的数据，就要获取顶层结构体，此处被标记的字段的顶层结构体</span></span><br><span class="line">    <span class="comment">// 为Student结构体。</span></span><br><span class="line">    age := fl.Top().Interface().(*Student).Age</span><br><span class="line">    <span class="keyword">if</span> age2&gt;age &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ginRouter := gin.Default()</span><br><span class="line">    binding.Validator.Engine().(*validator.Validate).RegisterValidation(<span class="string">"custom"</span>,customFunc)</span><br><span class="line">    ginRouter.POST(</span><br><span class="line">        <span class="string">"/test"</span>,</span><br><span class="line">        <span class="function"><span class="keyword">func</span><span class="params">(context *gin.Context)</span></span> &#123;</span><br><span class="line">            <span class="keyword">var</span> stu Student</span><br><span class="line">            err := context.ShouldBind(&amp;stu)</span><br><span class="line">            <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">                context.JSON(<span class="number">400</span>, err.Error())</span><br><span class="line">                context.Abort()</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            context.JSON(<span class="number">200</span>, stu)</span><br><span class="line">        &#125;,</span><br><span class="line">    )</span><br><span class="line">    ginRouter.Run(<span class="string">":8088"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>验证失败：</p><p><img src="https://gitee.com/nieaowei/images/raw/master/blog/20200409145713.png" alt><br><img src="https://gitee.com/nieaowei/images/raw/master/blog/20200409145744.png" alt></p><p>验证成功：</p><p><img src="https://gitee.com/nieaowei/images/raw/master/blog/20200409145820.png" alt><br><img src="https://gitee.com/nieaowei/images/raw/master/blog/20200409145805.png" alt></p><h2 id="5-常用验证"><a href="#5-常用验证" class="headerlink" title="5. 常用验证"></a>5. 常用验证</h2><h3 id="5-1-大小验证"><a href="#5-1-大小验证" class="headerlink" title="5.1 大小验证"></a>5.1 大小验证</h3><ul><li>gt/大于、字符串长度</li><li>gte/大于等于、字符串长度</li><li>lt/小于、字符串长度</li><li>lte/小于等于、字符串长度</li><li>eq/等于、字符串长度</li><li>ne/不等于、字符串长度</li><li>max/最大值、字符串长度最大值</li><li>min/最小值、字符串长度最小值</li><li>oneof/值验证，是否属于某数组集合中的一个</li><li>unique/确保数组和切片没有重复，确保map没有重复值</li></ul><h3 id="5-2-字符串验证"><a href="#5-2-字符串验证" class="headerlink" title="5.2 字符串验证"></a>5.2 字符串验证</h3><ul><li>len/切片长度，字符串长度</li><li>exists/必须存在字段</li><li>omitempty/传入字段无值，将不会进行验证</li><li>dive/使dive后面的验证标签应用于切片</li><li>alpha/只包含字母</li><li>alphanum/包含字母和数字</li><li>numeric/只包涵数字</li><li>hexadecimal/有效十六进制字符串</li><li>base64/有效base64字符串</li><li>contains/包含某子字符串</li><li>containsrune/包含字符</li><li>containsany/包含字符串中的任意字符或子串</li><li>excludes/不包含某子字符串</li><li>excludesall/不包含字符串中的任意字符或子串</li><li>excludesrune/不包含字符</li><li>lowercase/包含某小写字母</li><li>uppercase/包含某大写字母</li><li>uuid/验证uuid</li><li>ascii/仅包含ascii字符、为空也会验证成功</li><li>ipv4/ipv4地址</li><li>ipv6/ipv6地址</li><li>email/电子邮件地址</li><li>url/网址</li><li>json/json格式</li><li>startswith/某字符串开头</li><li>endswith/某字符结尾</li></ul><h3 id="5-3-必填验证"><a href="#5-3-必填验证" class="headerlink" title="5.3 必填验证"></a>5.3 必填验证</h3><ul><li>required_with/当某字段存在时，该字段为必填非空</li><li>required_without/当某字段不存在时，该字段为必填</li><li>required_without_all/当所有其他字段不存在谁，该字段为必填</li></ul><h3 id="5-4-其他验证"><a href="#5-4-其他验证" class="headerlink" title="5.4 其他验证"></a>5.4 其他验证</h3><ul><li>dir/验证目录在本机是否存在</li></ul>]]></content>
      
      
      <categories>
          
          <category> Go语言 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Gin框架-获取各类请求参数</title>
      <link href="/2020/3TRNKGR.html"/>
      <url>/2020/3TRNKGR.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-参数作为Url"><a href="#1-参数作为Url" class="headerlink" title="1. 参数作为Url"></a>1. 参数作为Url</h2><ol><li><p>代码如下 </p> <figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ginRouter := gin.Default()</span><br><span class="line">ginRouter.GET(</span><br><span class="line"><span class="string">"/:param1/:param2"</span>,</span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(context *gin.Context)</span></span> &#123;</span><br><span class="line">context.JSON(<span class="number">200</span>,gin.H&#123;</span><br><span class="line"><span class="string">"param1"</span>:context.Param(<span class="string">"param1"</span>),</span><br><span class="line"><span class="string">"param2"</span>:context.Param(<span class="string">"param2"</span>),</span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br><span class="line">)</span><br><span class="line">ginRouter.Run(<span class="string">":8088"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>结果</p><p> <img src="https://gitee.com/nieaowei/images/raw/master/blog/20200408005346.png" alt></p></li></ol><h2 id="2-获取Get请求参数"><a href="#2-获取Get请求参数" class="headerlink" title="2. 获取Get请求参数"></a>2. 获取Get请求参数</h2><ol><li><p>url请求参数格式</p><p> <code>http://ip:端口号/路由路径?参数1=参数值&amp;参数2=参数值...</code></p></li><li><p>代码如下</p> <figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ginRouter := gin.Default()</span><br><span class="line">ginRouter.GET(</span><br><span class="line"><span class="string">"/test"</span>,</span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(context *gin.Context)</span></span> &#123;</span><br><span class="line">context.JSON(<span class="number">200</span>,gin.H&#123;</span><br><span class="line"><span class="string">"param1"</span>:context.Query(<span class="string">"param1"</span>),</span><br><span class="line"><span class="string">"param2"</span>:context.Query(<span class="string">"param2"</span>),</span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br><span class="line">)</span><br><span class="line">ginRouter.Run(<span class="string">":8088"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试结果</p><p> <img src="https://gitee.com/nieaowei/images/raw/master/blog/20200408013046.png" alt></p></li></ol><h2 id="3-获取Post-Body内参数"><a href="#3-获取Post-Body内参数" class="headerlink" title="3. 获取Post/Body内参数"></a>3. 获取Post/Body内参数</h2><ol><li><p>代码如下</p> <figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ginRouter := gin.Default()</span><br><span class="line">ginRouter.POST(</span><br><span class="line"><span class="string">"/test"</span>,</span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(context *gin.Context)</span></span> &#123;</span><br><span class="line">data,err:= ioutil.ReadAll(context.Request.Body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">context.JSON(<span class="number">400</span>,err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">context.String(<span class="number">200</span>,<span class="string">"%s"</span>,<span class="keyword">string</span>(data))</span><br><span class="line">&#125;,</span><br><span class="line">)</span><br><span class="line">ginRouter.Run(<span class="string">":8088"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试结果</p><p> <img src="https://gitee.com/nieaowei/images/raw/master/blog/20200408233754.png" alt="请求内容"><br> <img src="https://gitee.com/nieaowei/images/raw/master/blog/20200408235145.png" alt="请求结果"></p></li></ol><h2 id="4-获取参数绑定"><a href="#4-获取参数绑定" class="headerlink" title="4. 获取参数绑定"></a>4. 获取参数绑定</h2><ol><li><p>代码如下</p> <figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span> <span class="string">`form:"name"`</span></span><br><span class="line">Age  <span class="keyword">int</span>    <span class="string">`form:"age"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ginRouter := gin.Default()</span><br><span class="line">ginRouter.GET(<span class="string">"/test"</span>,test)</span><br><span class="line">ginRouter.POST(<span class="string">"/test"</span>,test)</span><br><span class="line">ginRouter.Run(<span class="string">":8088"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> stu Student</span><br><span class="line"><span class="keyword">if</span> c.Bind(&amp;stu) == <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(<span class="number">200</span>, stu)</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">c.JSON(<span class="number">400</span>,gin.H&#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Get测试结果</p><p> <img src="https://gitee.com/nieaowei/images/raw/master/blog/20200408233605.png" alt="请求结果"></p></li><li><p>Post测试结果</p><p> <img src="https://gitee.com/nieaowei/images/raw/master/blog/20200408233754.png" alt="请求内容"><br> <img src="https://gitee.com/nieaowei/images/raw/master/blog/20200408233701.png" alt="请求结果"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Go语言 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Gin框架-静态文件服务器</title>
      <link href="/2020/CEEV6W.html"/>
      <url>/2020/CEEV6W.html</url>
      
        <content type="html"><![CDATA[<ol><li>项目目录如下<br><img src="https://gitee.com/nieaowei/images/raw/master/blog/20200408004400.png" alt></li><li>代码如下 ,如果使用goland的运行按钮，下面路径必须使用绝对路径，否则会找不到资源。还有要注意的就是<code>Static</code>方法绑定的文件夹，会通知浏览器对文件夹进行渲染，所以只支持浏览器能够渲染的文件，比如Html。</li></ol><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ginRouter := gin.Default()</span><br><span class="line"><span class="comment">//指定文件夹,会通知浏览器渲染文件</span></span><br><span class="line">ginRouter.Static(<span class="string">"/static"</span>,<span class="string">"/Users/nieaowei/Desktop/study01/static"</span>)</span><br><span class="line"><span class="comment">//指定文件夹，浏览器不会渲染文件</span></span><br><span class="line">ginRouter.StaticFS(<span class="string">"/staticDir"</span>,http.Dir(<span class="string">"/Users/nieaowei/Desktop/study01/staticdir"</span>))</span><br><span class="line"><span class="comment">//指定单个静态文件</span></span><br><span class="line">ginRouter.StaticFile(<span class="string">"/favicon.ico"</span>,<span class="string">"/Users/nieaowei/Desktop/study01/staticdir/1.ico"</span>)</span><br><span class="line">err := ginRouter.Run(<span class="string">":8088"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>结果如下<br><img src="https://gitee.com/nieaowei/images/raw/master/blog/20200408004446.png" alt><br><img src="https://gitee.com/nieaowei/images/raw/master/blog/20200408003745.png" alt><br><img src="https://gitee.com/nieaowei/images/raw/master/blog/20200408003839.png" alt></li></ol>]]></content>
      
      
      <categories>
          
          <category> Go语言 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Gin框架-请求路由基本请求</title>
      <link href="/2020/3R57ZBM.html"/>
      <url>/2020/3R57ZBM.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-路由介绍"><a href="#1-路由介绍" class="headerlink" title="1. 路由介绍"></a>1. 路由介绍</h2><p>在web项目中，路由可以说是URL到函数的映射。举个例子，你访问<code>https://www.baidu.com/</code>的时候，浏览器或默认执行GET方法，此时的路由就是<code>/</code>，在你后端代码中，会根据请求的<code>/</code>去执行相应的函数并返回相应的内容。</p><h2 id="2-请求类型"><a href="#2-请求类型" class="headerlink" title="2. 请求类型"></a>2. 请求类型</h2><h3 id="2-1-Get"><a href="#2-1-Get" class="headerlink" title="2.1. Get"></a>2.1. Get</h3><ol><li>代码如下<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ginRouter.GET(</span><br><span class="line"><span class="string">"/get"</span>,<span class="comment">//路由</span></span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(context *gin.Context)</span></span> &#123;</span><br><span class="line">context.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">"msg"</span>: <span class="string">"get"</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li>结果如下<br><img src="https://gitee.com/nieaowei/images/raw/master/blog/20200408000514.png" alt></li></ol><h3 id="2-2-Post"><a href="#2-2-Post" class="headerlink" title="2.2. Post"></a>2.2. Post</h3><ol><li>代码如下<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ginRouter.POST(</span><br><span class="line"><span class="string">"/get"</span>,</span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(context *gin.Context)</span></span> &#123;</span><br><span class="line">context.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">"msg"</span>: <span class="string">"post"</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li>结果如下<br><img src="https://gitee.com/nieaowei/images/raw/master/blog/20200408000539.png" alt><h3 id="2-3-Delete"><a href="#2-3-Delete" class="headerlink" title="2.3. Delete"></a>2.3. Delete</h3></li><li>代码如下<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ginRouter.DELETE(</span><br><span class="line"><span class="string">"/delete"</span>,</span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(context *gin.Context)</span></span> &#123;</span><br><span class="line">context.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">"msg"</span>: <span class="string">"delete"</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li>结果如下<br><img src="https://gitee.com/nieaowei/images/raw/master/blog/20200408000630.png" alt></li></ol><h3 id="2-4-Any方法的使用"><a href="#2-4-Any方法的使用" class="headerlink" title="2.4. Any方法的使用"></a>2.4. Any方法的使用</h3><p>any可以将一个路由对应多个请求类型。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ginRouter.Any(</span><br><span class="line"><span class="string">"/any"</span>,</span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(context *gin.Context)</span></span> &#123;</span><br><span class="line">context.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">"msg"</span>: <span class="string">"any"</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ol><li>GET<br><img src="https://gitee.com/nieaowei/images/raw/master/blog/20200408002411.png" alt></li><li>POST<br><img src="https://gitee.com/nieaowei/images/raw/master/blog/20200408002353.png" alt></li><li>PUT<br><img src="https://gitee.com/nieaowei/images/raw/master/blog/20200408002338.png" alt></li><li>DELETE<br><img src="https://gitee.com/nieaowei/images/raw/master/blog/20200408002227.png" alt><h3 id="2-5-完整代码"><a href="#2-5-完整代码" class="headerlink" title="2.5. 完整代码"></a>2.5. 完整代码</h3></li></ol><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ginRouter := gin.Default()</span><br><span class="line">ginRouter.GET(</span><br><span class="line"><span class="string">"/get"</span>,</span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(context *gin.Context)</span></span> &#123;</span><br><span class="line">context.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">"msg"</span>: <span class="string">"get"</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br><span class="line">)</span><br><span class="line">ginRouter.POST(</span><br><span class="line"><span class="string">"/get"</span>,</span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(context *gin.Context)</span></span> &#123;</span><br><span class="line">context.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">"msg"</span>: <span class="string">"post"</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br><span class="line">)</span><br><span class="line">ginRouter.DELETE(</span><br><span class="line"><span class="string">"/delete"</span>,</span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(context *gin.Context)</span></span> &#123;</span><br><span class="line">context.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">"msg"</span>: <span class="string">"delete"</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br><span class="line">)</span><br><span class="line">ginRouter.Any(</span><br><span class="line"><span class="string">"/any"</span>,</span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(context *gin.Context)</span></span> &#123;</span><br><span class="line">context.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">"msg"</span>: <span class="string">"any"</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br><span class="line">)</span><br><span class="line">err := ginRouter.Run(<span class="string">":8088"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-6-正则路由"><a href="#2-6-正则路由" class="headerlink" title="2.6. 正则路由"></a>2.6. 正则路由</h3><p>正则路由可以将指定前缀url全部指向一个函数。</p><ol><li>代码如下</li></ol><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ginRouter := gin.Default()</span><br><span class="line">ginRouter.GET(</span><br><span class="line"><span class="string">"/pre/*a"</span>,</span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(context *gin.Context)</span></span> &#123;</span><br><span class="line">context.JSON(<span class="number">200</span>,gin.H&#123;</span><br><span class="line"><span class="string">"msg"</span>:<span class="string">"helloworld"</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br><span class="line">)</span><br><span class="line">ginRouter.Run(<span class="string">":8088"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>结果<br>此时可以看见，将<code>/pre</code>前缀路径的<code>Get</code>请求全都指向了那一个执行方法。<br><img src="https://gitee.com/nieaowei/images/raw/master/blog/20200408010351.png" alt><br><img src="https://gitee.com/nieaowei/images/raw/master/blog/20200408010408.png" alt></li></ol>]]></content>
      
      
      <categories>
          
          <category> Go语言 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Gin框架-第一个程序HelloWorld</title>
      <link href="/2020/3KDWDKB.html"/>
      <url>/2020/3KDWDKB.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-简言"><a href="#1-简言" class="headerlink" title="1. 简言"></a>1. 简言</h2><p>Gin是一个Go语言编写的高性能的Web框架，可以用于mvc结构或者是mvvm架构的web项目，在GitHub上有24k+的Star。</p><h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h2><p><code>go get -u github.com/gin-gonic/gin</code></p><p><img src="https://gitee.com/nieaowei/images/raw/master/blog/20200407234412.png" alt></p><h2 id="3-HelloWorld代码"><a href="#3-HelloWorld代码" class="headerlink" title="3. HelloWorld代码"></a>3. HelloWorld代码</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ginRouter := gin.Default()</span><br><span class="line">ginRouter.GET(</span><br><span class="line"><span class="string">"/"</span>,</span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(context *gin.Context)</span></span> &#123;</span><br><span class="line">context.JSON(<span class="number">200</span>,gin.H&#123;</span><br><span class="line"><span class="string">"msg"</span>:<span class="string">"helloword"</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br><span class="line">)</span><br><span class="line">err := ginRouter.Run(<span class="string">":8088"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-Http测试"><a href="#4-Http测试" class="headerlink" title="4. Http测试"></a>4. Http测试</h2><ul><li>使用Postman测试工具</li><li>使用浏览器直接访问</li><li>使用Goland自带的Http测试，新建http后缀的文件。<br>  <img src="https://gitee.com/nieaowei/images/raw/master/blog/20200408000043.png" alt></li><li>使用终端的Curl命令<br>  <code>curl -X 方法（get/post....）</code></li></ul><h2 id="5-运行结果"><a href="#5-运行结果" class="headerlink" title="5. 运行结果"></a>5. 运行结果</h2><ol><li><p>使用终端</p><p> <img src="https://gitee.com/nieaowei/images/raw/master/blog/20200407235206.png" alt></p></li><li><p>使用浏览器访问</p><p> <img src="https://gitee.com/nieaowei/images/raw/master/blog/20200407235314.png" alt></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Go语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go语言 </tag>
            
            <tag> Gin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7、Ubuntu安装Docker容器</title>
      <link href="/2020/28VBK0S.html"/>
      <url>/2020/28VBK0S.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-使用官方脚本自动安装"><a href="#1-使用官方脚本自动安装" class="headerlink" title="1. 使用官方脚本自动安装"></a>1. 使用官方脚本自动安装</h2><p><code>curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</code></p><h2 id="2-常用命令"><a href="#2-常用命令" class="headerlink" title="2. 常用命令"></a>2. 常用命令</h2><ul><li>启动docker服务<br><code>systemctl start docker</code></li><li>查看运行容器<br><code>docker ps</code></li><li>查看所有容器<br><code>docker ps -a</code></li><li>启动容器<br><code>docker start 容器名称或id</code></li><li>设置开机自启<br><code>systemctl enable docker</code></li><li>停止docker服务<br><code>systemctl stop docker</code></li><li>拉取镜像<br><code>docker pull 镜像地址</code></li><li>新建容器并运行<br><code>docker run -d -p本地端口:容器端口 --name 自定义容器名称 镜像名称</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 杂文 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JetPack Compose 安卓开发-Fragment和navigation初探（三）</title>
      <link href="/2020/138BRG9.html"/>
      <url>/2020/138BRG9.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-新建组件化项目"><a href="#1-新建组件化项目" class="headerlink" title="1. 新建组件化项目"></a>1. 新建组件化项目</h1><p>与上篇一样，需要添加依赖等配置，这次新增几个依赖如下。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def nav_version = <span class="string">"2.3.0-alpha04"</span></span><br><span class="line">  implementation <span class="string">"androidx.navigation:navigation-fragment-ktx:<span class="variable">$nav_version</span>"</span></span><br><span class="line">  implementation <span class="string">"androidx.navigation:navigation-ui-ktx:<span class="variable">$nav_version</span>"</span></span><br><span class="line">  implementation <span class="string">"androidx.navigation:navigation-dynamic-features-fragment:<span class="variable">$nav_version</span>"</span></span><br><span class="line">  androidTestImplementation <span class="string">"androidx.navigation:navigation-testing:<span class="variable">$nav_version</span>"</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/nieaowei/images/raw/master/blog/20200330065204.png" alt></p><h1 id="2-新建两个空白Fragment。"><a href="#2-新建两个空白Fragment。" class="headerlink" title="2. 新建两个空白Fragment。"></a>2. 新建两个空白Fragment。</h1><p><img src="https://gitee.com/nieaowei/images/raw/master/blog/20200330070954.png" alt></p><h1 id="3-新建一个navigation资源文件"><a href="#3-新建一个navigation资源文件" class="headerlink" title="3. 新建一个navigation资源文件"></a>3. 新建一个navigation资源文件</h1><p><img src="https://gitee.com/nieaowei/images/raw/master/blog/20200331175556.png" alt><br><img src="https://gitee.com/nieaowei/images/raw/master/blog/20200330071229.png" alt></p><h1 id="4-构建MainActivity并设置视图，配置导航主机。"><a href="#4-构建MainActivity并设置视图，配置导航主机。" class="headerlink" title="4. 构建MainActivity并设置视图，配置导航主机。"></a>4. 构建MainActivity并设置视图，配置导航主机。</h1><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;</span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> mLayout: LinearLayout <span class="comment">//总体布局</span></span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> mToolbar: Toolbar      <span class="comment">//顶部工具栏</span></span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> mFragmentContainer: FragmentContainerView; <span class="comment">//Fragment容器</span></span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> mNavHostFragment: NavHostFragment <span class="comment">//导航主机</span></span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> mBottomNavigationView: BottomNavigationView <span class="comment">//底部导航</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        initView()</span><br><span class="line">        setContentView(mLayout)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">initView</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">//总体布局处理</span></span><br><span class="line">        mLayout = LinearLayout(<span class="keyword">this</span>)</span><br><span class="line">        <span class="keyword">val</span> params = LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.MATCH_PARENT)</span><br><span class="line">        mLayout.layoutParams = params</span><br><span class="line">        mLayout.orientation = LinearLayout.VERTICAL</span><br><span class="line">        <span class="comment">//底部导航处理</span></span><br><span class="line">        mBottomNavigationView = BottomNavigationView(<span class="keyword">this</span>)</span><br><span class="line">        mBottomNavigationView.setBackgroundColor(Color.YELLOW)</span><br><span class="line">        mLayout.addView(mBottomNavigationView)</span><br><span class="line">        <span class="comment">//顶部工具栏处理</span></span><br><span class="line">        mToolbar = Toolbar(<span class="keyword">this</span>)</span><br><span class="line">        mToolbar.title = <span class="string">"Hello Android"</span></span><br><span class="line">        mLayout.addView(mToolbar)</span><br><span class="line">        <span class="comment">//初始化Fragment容器</span></span><br><span class="line">        mFragmentContainer = FragmentContainerView(<span class="keyword">this</span>)</span><br><span class="line">        mFragmentContainer.id=R.id.nav_host</span><br><span class="line">        mLayout.addView(mFragmentContainer)</span><br><span class="line">        <span class="comment">//初始化导航主机</span></span><br><span class="line">        mNavHostFragment = NavHostFragment.create(R.navigation.nav)</span><br><span class="line">        supportFragmentManager.beginTransaction()</span><br><span class="line">                .replace(R.id.nav_host,mNavHostFragment)</span><br><span class="line">                .setPrimaryNavigationFragment(mNavHostFragment)<span class="comment">//设置默认导航主机</span></span><br><span class="line">                .commit()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//开启支持导航</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onSupportNavigateUp</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> findNavController(R.id.nav_host_fragment_container).navigateUp()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JetPack Compose 安卓开发-Activity间跳转和数据传递（二）</title>
      <link href="/2020/3YZQVNS.html"/>
      <url>/2020/3YZQVNS.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>Fragment在Android3.0之后变得非常常见，很多app也开始尝试一个activity+多个Fragment的开发模式，相比于activity，Fragment在界面切换管理上是非常方便的，今天主要还是学习jetpack来实现组件化开发。jetpack是谷歌新推出的ui开发包，借鉴了vue、flutter等数据驱动UI的思维，让数据和ui的交互变得更容易了，甚至不用去设置监听器了,甚至你不需要Fragment了。</p><h2 id="2-新建项目"><a href="#2-新建项目" class="headerlink" title="2. 新建项目"></a>2. 新建项目</h2><ol><li>新建一个Kotlin项目<br><img src="https://gitee.com/nieaowei/images/raw/master/blog/20200327132009.png" alt><br><img src="https://gitee.com/nieaowei/images/raw/master/blog/20200327134943.png" alt></li><li>新建两个空Activity。<br><img src="https://gitee.com/nieaowei/images/raw/master/blog/20200327193929.png" alt></li><li>在Module build.gradle，加入如下配置 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">composeOptions &#123;</span><br><span class="line">        kotlinCompilerExtensionVersion <span class="string">"$compose_compiler_extension_version"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://gitee.com/nieaowei/images/raw/master/blog/20200327193606.png" alt></li><li>导入JetPack相关依赖，将Module build.gradle中的依赖修改为如下，最后构建一下项目</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    def compose_version = <span class="string">"0.1.0-dev07"</span></span><br><span class="line">    implementation <span class="string">"org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"</span></span><br><span class="line">    implementation(<span class="string">"androidx.compose:compose-runtime:$compose_version"</span>)</span><br><span class="line">    implementation(<span class="string">"androidx.ui:ui-framework:$compose_version"</span>)</span><br><span class="line">    implementation(<span class="string">"androidx.ui:ui-layout:$compose_version"</span>)</span><br><span class="line">    implementation(<span class="string">"androidx.ui:ui-material:$compose_version"</span>)</span><br><span class="line">    implementation(<span class="string">"androidx.ui:ui-foundation:$compose_version"</span>)</span><br><span class="line">    implementation(<span class="string">"androidx.ui:ui-animation:$compose_version"</span>)</span><br><span class="line">    implementation <span class="string">"androidx.ui:ui-tooling:$compose_version"</span></span><br><span class="line">    implementation <span class="string">"androidx.ui:ui-android-text:$compose_version"</span></span><br><span class="line">    implementation <span class="string">"androidx.ui:ui-animation-core:$compose_version"</span></span><br><span class="line">    implementation <span class="string">"androidx.ui:ui-core:$compose_version"</span></span><br><span class="line">    implementation <span class="string">"androidx.ui:ui-geometry:$compose_version"</span></span><br><span class="line">    implementation <span class="string">"androidx.ui:ui-graphics:$compose_version"</span></span><br><span class="line">    implementation <span class="string">"androidx.ui:ui-material:$compose_version"</span></span><br><span class="line">    implementation <span class="string">"androidx.ui:ui-unit:$compose_version"</span></span><br><span class="line">    implementation <span class="string">"androidx.ui:ui-util:$compose_version"</span></span><br><span class="line">    implementation <span class="string">"androidx.ui:ui-vector:$compose_version"</span></span><br><span class="line"></span><br><span class="line">    implementation(<span class="string">'androidx.appcompat:appcompat:1.1.0'</span>)</span><br><span class="line">    implementation(<span class="string">'androidx.activity:activity-ktx:1.1.0'</span>)</span><br><span class="line">    implementation <span class="string">"androidx.core:core-ktx:1.2.0"</span></span><br><span class="line"></span><br><span class="line">    androidTestImplementation(<span class="string">"junit:junit:4.13"</span>)</span><br><span class="line">    androidTestImplementation(<span class="string">"androidx.test:rules:1.2.0"</span>)</span><br><span class="line">    androidTestImplementation(<span class="string">"androidx.test:runner:1.2.0"</span>)</span><br><span class="line">    androidTestImplementation(<span class="string">"androidx.ui:ui-platform:$compose_version"</span>)</span><br><span class="line">    androidTestImplementation(<span class="string">"androidx.ui:ui-test:$compose_version"</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/nieaowei/images/raw/master/blog/20200327131149.png" alt></p><h2 id="3-构建一个带标签输入框"><a href="#3-构建一个带标签输入框" class="headerlink" title="3. 构建一个带标签输入框"></a>3. 构建一个带标签输入框</h2><ol><li>为了将组件化编程思维贯彻到底，首先就构建一个带标签的输入框。</li></ol><p><img src="https://gitee.com/nieaowei/images/raw/master/blog/20200328172534.png" alt></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//label : 标签名</span></span><br><span class="line"><span class="comment">//state : 绑定的数据</span></span><br><span class="line"><span class="comment">//modifier : 布局样式</span></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">EditText</span><span class="params">(label:<span class="type">String</span>, state : <span class="type">MutableState</span>&lt;<span class="type">String</span>&gt;,modifier: <span class="type">Modifier</span>)</span></span>&#123;</span><br><span class="line">        Row(modifier = modifier) &#123;</span><br><span class="line">            Text(</span><br><span class="line">                    text = label,</span><br><span class="line">                    style = (MaterialTheme.typography()).h6</span><br><span class="line">            )</span><br><span class="line">            Surface(border = Border(<span class="number">1</span>.dp, Color.Black),modifier = LayoutPadding(start = <span class="number">5</span>.dp) ) &#123;</span><br><span class="line">                TextField(</span><br><span class="line">                        textStyle = (MaterialTheme.typography()).h6,</span><br><span class="line">                        value = state.value,</span><br><span class="line">                        onValueChange = &#123;</span><br><span class="line">                            state.value = it</span><br><span class="line">                        &#125;,</span><br><span class="line">                        modifier = LayoutPadding(start = <span class="number">5</span>.dp)</span><br><span class="line">                )</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-构建第一个Activity的界面"><a href="#4-构建第一个Activity的界面" class="headerlink" title="4. 构建第一个Activity的界面"></a>4. 构建第一个Activity的界面</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContent &#123;</span><br><span class="line">            MaterialTheme &#123;</span><br><span class="line">            <span class="comment">//接收其他Activity传来的参数</span></span><br><span class="line">                DefaultPreview(<span class="keyword">this</span>.intent.extras)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        MainActivity.context = <span class="keyword">this</span>.applicationContext</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="keyword">lateinit</span> <span class="keyword">var</span> context: Context;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//由于带参数组件不可预览，所以这个默认传参用于预览</span></span><br><span class="line"><span class="meta">@Preview</span></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">PreviewUI</span><span class="params">()</span></span> &#123;</span><br><span class="line">    DefaultPreview(bundle = <span class="literal">null</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">DefaultPreview</span><span class="params">(bundle: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line"><span class="comment">//数据驱动UI思维，使用`state`方法创建一个`MutableState`类型数据变量，</span></span><br><span class="line"><span class="comment">//用于输入框数据绑定</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> input = state() &#123; <span class="string">""</span> &#125;</span><br><span class="line">    Scaffold(</span><br><span class="line">        topAppBar = &#123;</span><br><span class="line">            TopAppBar(title = &#123; Text(text = <span class="string">"Intent"</span>) &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">        bodyContent = &#123;</span><br><span class="line">            Column(modifier = LayoutPadding(<span class="number">5</span>.dp)) &#123;</span><br><span class="line">                EditText(</span><br><span class="line">                    label = <span class="string">"第一个Activity:"</span>,</span><br><span class="line">                    state = input,</span><br><span class="line">                    modifier = LayoutWidth(width = <span class="number">300</span>.dp)</span><br><span class="line">                )</span><br><span class="line">                <span class="keyword">if</span> (bundle != <span class="literal">null</span>) &#123;</span><br><span class="line">                    Text(</span><br><span class="line">                        text = bundle.getString(<span class="string">"msg"</span>, <span class="string">"第二个Activity传递值"</span>),</span><br><span class="line">                        style = (MaterialTheme.typography()).h6</span><br><span class="line">                    )</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Text(</span><br><span class="line">                        text = <span class="string">"第二个Activity传递值"</span>,</span><br><span class="line">                        style = (MaterialTheme.typography()).h6</span><br><span class="line">                    )</span><br><span class="line">                &#125;</span><br><span class="line">                Button(</span><br><span class="line">                    modifier = LayoutPadding(<span class="number">5</span>.dp),</span><br><span class="line">                    onClick = &#123;</span><br><span class="line">                    <span class="comment">//传递参数跳转</span></span><br><span class="line">                        <span class="keyword">val</span> intent = Intent(MainActivity.context, MainActivity2::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line">                        intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK</span><br><span class="line">                        <span class="keyword">val</span> bundle1: Bundle = Bundle()</span><br><span class="line">                        bundle1.putString(<span class="string">"msg"</span>, input.value)</span><br><span class="line">                        intent.putExtras(bundle1)</span><br><span class="line">                        MainActivity.context.startActivity(intent)</span><br><span class="line">                    &#125;</span><br><span class="line">                ) &#123;</span><br><span class="line">                    Text(</span><br><span class="line">                        text = <span class="string">"跳转到第二个Activity"</span></span><br><span class="line">                    )</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">EditText</span><span class="params">(label: <span class="type">String</span>, state: <span class="type">MutableState</span>&lt;<span class="type">String</span>&gt;, modifier: <span class="type">Modifier</span>)</span></span> &#123;</span><br><span class="line">    Row(modifier = modifier) &#123;</span><br><span class="line">        Text(</span><br><span class="line">            text = label,</span><br><span class="line">            style = (MaterialTheme.typography()).h6</span><br><span class="line">        )</span><br><span class="line">        Surface(border = Border(<span class="number">1</span>.dp, Color.Black), modifier = LayoutPadding(start = <span class="number">5</span>.dp)) &#123;</span><br><span class="line">            TextField(</span><br><span class="line">                textStyle = (MaterialTheme.typography()).h6,</span><br><span class="line">                value = state.value,</span><br><span class="line">                onValueChange = &#123;</span><br><span class="line">                    state.value = it</span><br><span class="line">                &#125;,</span><br><span class="line">                modifier = LayoutPadding(start = <span class="number">5</span>.dp)</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/nieaowei/images/raw/master/blog/20200328174932.png" alt></p><h2 id="5-构建第二个Activity的界面"><a href="#5-构建第二个Activity的界面" class="headerlink" title="5. 构建第二个Activity的界面"></a>5. 构建第二个Activity的界面</h2><p>两个代码差别不大。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity2</span> : <span class="type">AppCompatActivity</span></span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContent &#123;</span><br><span class="line">            DefaultPreview2(<span class="keyword">this</span>.intent.extras)</span><br><span class="line">        &#125;</span><br><span class="line">        MainActivity2.context = <span class="keyword">this</span>.applicationContext</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="keyword">lateinit</span> <span class="keyword">var</span> context: Context;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Preview</span></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">PreviewUI2</span><span class="params">()</span></span> &#123;</span><br><span class="line">    DefaultPreview2(bundle = <span class="literal">null</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">DefaultPreview2</span><span class="params">(bundle: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">    Scaffold(</span><br><span class="line">        topAppBar = &#123;</span><br><span class="line">            TopAppBar(title = &#123; Text(text = <span class="string">"Intent"</span>) &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">        bodyContent = &#123;</span><br><span class="line">            Column(modifier = LayoutPadding(<span class="number">5</span>.dp)) &#123;</span><br><span class="line">                Text(</span><br><span class="line">                    text = <span class="string">"第二个Activity"</span>,</span><br><span class="line">                    style = (MaterialTheme.typography()).h6</span><br><span class="line">                )</span><br><span class="line">                <span class="keyword">if</span> (bundle != <span class="literal">null</span>) &#123;</span><br><span class="line">                    Text(</span><br><span class="line">                        text = bundle.getString(<span class="string">"msg"</span>, <span class="string">"第一个Activity传递值"</span>),</span><br><span class="line">                        style = (MaterialTheme.typography()).h6</span><br><span class="line">                    )</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Text(</span><br><span class="line">                        text = <span class="string">"第一个Activity传递值"</span>,</span><br><span class="line">                        style = (MaterialTheme.typography()).h6</span><br><span class="line">                    )</span><br><span class="line">                &#125;</span><br><span class="line">                Button(</span><br><span class="line">                    modifier = LayoutPadding(<span class="number">5</span>.dp),</span><br><span class="line">                    onClick = &#123;</span><br><span class="line">                        <span class="keyword">val</span> intent = Intent(MainActivity2.context, MainActivity::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line">                        intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK</span><br><span class="line">                        <span class="keyword">val</span> bundle1: Bundle = Bundle()</span><br><span class="line">                        bundle1.putString(<span class="string">"msg"</span>, <span class="string">"nieaowei"</span>)</span><br><span class="line">                        intent.putExtras(bundle1)</span><br><span class="line">                        MainActivity2.context.startActivity(intent)</span><br><span class="line">                    &#125;</span><br><span class="line">                ) &#123;</span><br><span class="line">                    Text(</span><br><span class="line">                        text = <span class="string">"返回到第一个Activity"</span></span><br><span class="line">                    )</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/nieaowei/images/raw/master/blog/20200328185113.png" alt></p><h2 id="6-结果演示"><a href="#6-结果演示" class="headerlink" title="6. 结果演示"></a>6. 结果演示</h2><p><img src="https://s1.ax1x.com/2020/03/28/GAG1eA.gif" alt></p><h2 id="7-源代码"><a href="#7-源代码" class="headerlink" title="7. 源代码"></a>7. 源代码</h2><p>下载地址：<a href="https://www.lanzous.com/iaqoyih" target="_blank" rel="noopener">https://www.lanzous.com/iaqoyih</a></p>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git服务器双向同步代码的使用</title>
      <link href="/2020/2EQXTDP.html"/>
      <url>/2020/2EQXTDP.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-创建支持工作目录的远程仓库"><a href="#1-创建支持工作目录的远程仓库" class="headerlink" title="1. 创建支持工作目录的远程仓库"></a>1. 创建支持工作目录的远程仓库</h3><p>远程服务器初始化仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init &lt;仓库名&gt;</span><br></pre></td></tr></table></figure><h3 id="2-设置允许远程接收文件"><a href="#2-设置允许远程接收文件" class="headerlink" title="2. 设置允许远程接收文件"></a>2. 设置允许远程接收文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config receive.denyCurrentBranch ignore</span><br></pre></td></tr></table></figure><h3 id="3-建立接受钩子文件"><a href="#3-建立接受钩子文件" class="headerlink" title="3. 建立接受钩子文件"></a>3. 建立接受钩子文件</h3><p>在远程仓库,post-receive 钩子文件中添加自动更新工作目录内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">WORK_TREE='../'</span><br><span class="line">git  --work-tree="$&#123;WORK_TREE&#125;" reset --hard</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker部署Mysql数据库</title>
      <link href="/2020/22X88J.html"/>
      <url>/2020/22X88J.html</url>
      
        <content type="html"><![CDATA[<p>docker安装：<a href="https://www.nekilc.com/2020/28VBK0S.html">Centos、Ubuntu安装Docker</a></p><h2 id="1-简单使用"><a href="#1-简单使用" class="headerlink" title="1. 简单使用"></a>1. 简单使用</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:5.7.28</span><br><span class="line">docker run --name mysql -e MYSQL_ROOT_PASSWORD=12345 -p 3306:3306 -d mysql:5.7.28</span><br></pre></td></tr></table></figure><h2 id="2-指定本机配置文件"><a href="#2-指定本机配置文件" class="headerlink" title="2. 指定本机配置文件"></a>2. 指定本机配置文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-v /my/custom:/etc/mysql/conf.d</span><br></pre></td></tr></table></figure><h2 id="3-持久化数据-指定本机数据储存"><a href="#3-持久化数据-指定本机数据储存" class="headerlink" title="3. 持久化数据/指定本机数据储存"></a>3. 持久化数据/指定本机数据储存</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-v /my/own/datadir:/var/lib/mysql</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> Docker </tag>
            
            <tag> 数据库 </tag>
            
            <tag> Centos </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JetPack Compose 安卓开发-环境搭建（一）</title>
      <link href="/2020/2K0XH5G.html"/>
      <url>/2020/2K0XH5G.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>本文旨在小白也能够顺利安装安卓开发环境，解决虚拟设备、SDK、GRADLE的路径修改问题。</p><h2 id="2-Java开发环境"><a href="#2-Java开发环境" class="headerlink" title="2. Java开发环境"></a>2. Java开发环境</h2><p>该教程无需手动安装Java环境。</p><h2 id="3-集成开发环境（Android-Studio）"><a href="#3-集成开发环境（Android-Studio）" class="headerlink" title="3. 集成开发环境（Android Studio）"></a>3. 集成开发环境（Android Studio）</h2><h3 id="3-1-下载安装JetBrain的ToolBox"><a href="#3-1-下载安装JetBrain的ToolBox" class="headerlink" title="3.1. 下载安装JetBrain的ToolBox"></a>3.1. 下载安装JetBrain的ToolBox</h3><p><a href="https://www.lanzous.com/iaa5pje" target="_blank" rel="noopener">点击下载</a></p><h3 id="3-2-修改ToolBox的安装地址"><a href="#3-2-修改ToolBox的安装地址" class="headerlink" title="3.2. 修改ToolBox的安装地址"></a>3.2. 修改ToolBox的安装地址</h3><ol><li><p>打开ToolBox的设置<br><img src="https://gitee.com/nieaowei/images/raw/master/1584787643_20200315163947962_127009905.png" alt></p></li><li><p>选择路径并应用</p><p><img src="https://gitee.com/nieaowei/images/raw/master/1584787643_20200315164457880_56728217.png" alt></p><p><img src="https://gitee.com/nieaowei/images/raw/master/1584787645_20200315165345379_406917145.png" alt></p></li><li><p>返回工具列表，找到AS ，可以选择你想要的版本，个人喜欢最新版</p></li></ol><p><img src="https://gitee.com/nieaowei/images/raw/master/1584787645_20200315164649245_2095887498.png" alt></p><h3 id="3-3-配置SDK路径"><a href="#3-3-配置SDK路径" class="headerlink" title="3.3. 配置SDK路径"></a>3.3. 配置SDK路径</h3><ol><li><p>等待安装完成，打开AS。</p><p><img src="https://gitee.com/nieaowei/images/raw/master/1584787646_20200315165809435_1468523967.png" alt></p></li><li><p>提示不能增加AndroidSDK，原因是因为需要设置代理，没有代理的话直接取消，会打开配置界面。</p><p><img src="https://gitee.com/nieaowei/images/raw/master/1584787646_20200315165903140_452758398.png" alt></p></li><li><p>关掉如下配置界面，会回到启动界面。</p><p><img src="https://gitee.com/nieaowei/images/raw/master/1584787646_20200315170030096_975833865.png" alt></p></li><li><p>打开设置。</p><p><img src="https://gitee.com/nieaowei/images/raw/master/1584787647_20200315170748645_423692269.png" alt></p></li><li><p>找到如下界面，点击edit编辑按钮</p><p><img src="https://gitee.com/nieaowei/images/raw/master/1584787647_20200315170841832_2087675278.png" alt></p></li><li><p>选择你需要安装的位置后，一路next，然后等待很长一段时间，我使用了代理，所以非常快。</p><p><img src="https://gitee.com/nieaowei/images/raw/master/1584787648_20200315170938889_1970572660.png" alt></p></li><li><p>结束之后你会看到如下界面，此时路径已经修改，说明你成功了。</p><p><img src="https://gitee.com/nieaowei/images/raw/master/1584787648_20200315171553399_921892586.png" alt> </p><p><img src="https://gitee.com/nieaowei/images/raw/master/1584787649_20200315171654184_154179797.png" alt></p></li></ol><h3 id="3-4-配置安卓虚拟设备"><a href="#3-4-配置安卓虚拟设备" class="headerlink" title="3.4. 配置安卓虚拟设备"></a>3.4. 配置安卓虚拟设备</h3><ol><li><p>进行如下操作，以进行下一步，勾选HAXM ，然后应用（apply)。</p><p><img src="https://gitee.com/nieaowei/images/raw/master/1584787650_20200315172321074_502469578.png" alt></p></li><li><p>应用后会出现一个界面，一路next，建议该界面下选择2gb。</p><p><img src="https://gitee.com/nieaowei/images/raw/master/1584787651_20200315172442554_1100497442.png" alt></p></li><li><p>关闭AS，进行环境变量配置。</p><p>a. 打开window设置，界面搜索 编辑系统环境变量。<br><img src="https://gitee.com/nieaowei/images/raw/master/1584787651_20200315182609043_1942115051.png" alt><br>b. 选择环境变量。<br><img src="https://gitee.com/nieaowei/images/raw/master/1584787652_20200315182623931_755197930.png" alt><br>c. 新建一个名为 ANDROID_SDK_HOME的环境变量，变量值填写你自己的路径,然后确定 以及 应用。<br><img src="https://gitee.com/nieaowei/images/raw/master/1584787652_20200315182643838_478493330.png" alt></p></li><li><p>再次启动AS，启动界面，选择如下设置去设置安卓虚拟设备。</p><p><img src="https://gitee.com/nieaowei/images/raw/master/1584787649_20200315171857442_1434569897.png" alt></p><p><img src="https://gitee.com/nieaowei/images/raw/master/1584787650_20200315171933598_1017354010.png" alt></p></li><li><p>选择一个设备，当然你也可以自定义设备信息（屏幕尺寸、颜色深度等等）。</p><p><img src="https://gitee.com/nieaowei/images/raw/master/1584787652_20200315182949443_2134231754.png" alt></p></li><li><p>下一步之后，会看到这个界面，下载一个安卓系统镜像,左下角提示没有选择系统镜像，你需要点击相应安卓版本的下载（Download）按钮下载</p><p><img src="https://gitee.com/nieaowei/images/raw/master/1584787652_20200315182926933_1994992024.png" alt></p></li><li><p>点击下载后会弹出如下界面。</p><p><img src="https://gitee.com/nieaowei/images/raw/master/1584787653_20200315183303409_1132399407.png" alt><br>等待完成即可。<br><img src="https://gitee.com/nieaowei/images/raw/master/1584787653_20200315183327788_881726167.png" alt></p></li><li><p>完成之后，下载按钮消失了，点击选择它，然后下一步就完成了。</p><p><img src="https://gitee.com/nieaowei/images/raw/master/1584787653_20200315183357684_1750000052.png" alt></p><p><img src="https://gitee.com/nieaowei/images/raw/master/1584787654_20200315183449234_1537261378.png" alt></p></li></ol><h3 id="3-5-配置GRADLE路径"><a href="#3-5-配置GRADLE路径" class="headerlink" title="3.5. 配置GRADLE路径"></a>3.5. 配置GRADLE路径</h3><p><img src="https://gitee.com/nieaowei/images/raw/master/1584787655_20200315183847591_1762060673.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Android </tag>
            
            <tag> 安卓 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GoHttp包详解</title>
      <link href="/2020/3HG63WA.html"/>
      <url>/2020/3HG63WA.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-使用示例"><a href="#1-使用示例" class="headerlink" title="1. 使用示例"></a>1. 使用示例</h2><h3 id="1-1-服务器平滑关机Shutdown"><a href="#1-1-服务器平滑关机Shutdown" class="headerlink" title="1.1. 服务器平滑关机Shutdown()"></a>1.1. 服务器平滑关机<code>Shutdown()</code></h3><p>根据源代码可知，它会等待所有子连接都被关闭才会结束，通过ctx或定时器才可停止该操作。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(srv *Server)</span> <span class="title">Shutdown</span><span class="params">(ctx context.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">atomic.StoreInt32(&amp;srv.inShutdown, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">srv.mu.Lock()</span><br><span class="line">lnerr := srv.closeListenersLocked()</span><br><span class="line">srv.closeDoneChanLocked()</span><br><span class="line"><span class="keyword">for</span> _, f := <span class="keyword">range</span> srv.onShutdown &#123;</span><br><span class="line"><span class="keyword">go</span> f()</span><br><span class="line">&#125;</span><br><span class="line">srv.mu.Unlock()</span><br><span class="line"></span><br><span class="line">ticker := time.NewTicker(shutdownPollInterval)</span><br><span class="line"><span class="keyword">defer</span> ticker.Stop()</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> srv.closeIdleConns() &#123;</span><br><span class="line"><span class="keyword">return</span> lnerr</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-ctx.Done():</span><br><span class="line"><span class="keyword">return</span> ctx.Err()</span><br><span class="line"><span class="keyword">case</span> &lt;-ticker.C:</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-静态文件服务器请求过滤示例"><a href="#1-2-静态文件服务器请求过滤示例" class="headerlink" title="1.2. 静态文件服务器请求过滤示例"></a>1.2. 静态文件服务器请求过滤示例</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"net/http"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HttpHandler</span><span class="params">(h http.Handler)</span> <span class="title">http</span>.<span class="title">HandlerFunc</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(writer http.ResponseWriter, request *http.Request)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="literal">true</span> &#123;</span><br><span class="line">http.Redirect(writer,request,<span class="string">"http://www.baidu.com"</span>,<span class="number">302</span>)</span><br><span class="line">&#125;</span><br><span class="line">h.ServeHTTP(writer,request)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">http.HandleFunc(<span class="string">"/"</span>,HttpHandler(http.FileServer(http.Dir(<span class="string">"/Users/nieaowei/Desktop/blog/public"</span>))))</span><br><span class="line">http.ListenAndServe(<span class="string">"0.0.0.0:80"</span>,<span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Go语言 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Go语言通道的使用</title>
      <link href="/2020/1FFNQNE.html"/>
      <url>/2020/1FFNQNE.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h2><h3 id="1-1-channel介绍"><a href="#1-1-channel介绍" class="headerlink" title="1.1. channel介绍"></a>1.1. channel介绍</h3><p>goroutine 奉行通过通信来共享内存，而不是共享内存来通信，而channel就是其中的通信机制，可以接受和发送消息。</p><h3 id><a href="#" class="headerlink" title></a></h3><h2 id="2-使用示例"><a href="#2-使用示例" class="headerlink" title="2. 使用示例"></a>2. 使用示例</h2><h3 id="2-1-基础使用"><a href="#2-1-基础使用" class="headerlink" title="2.1. 基础使用"></a>2.1. 基础使用</h3><ol><li>发送消息</li></ol><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">ch &lt;- <span class="number">123</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>接收消息</li></ol><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">ch &lt;- <span class="number">123</span></span><br><span class="line">recv ,ok := &lt;- ch</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">fmt.Println(<span class="string">"channel is closed."</span>)</span><br><span class="line"><span class="keyword">return</span> </span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(recv)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>关闭通道<br>关闭通道不会影响已发送的数据被接收，只有当关闭通道后已经发送的数据被接收完后去接收数据才会报false。</li></ol><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>,<span class="number">1</span>)</span><br><span class="line">ch &lt;<span class="number">-1</span></span><br><span class="line"><span class="built_in">close</span>(ch)</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> i,ok:=&lt;-ch :</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">fmt.Println(ok)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"into"</span>,i)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">"no into"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ch &lt;- 1</span></span><br><span class="line">n ,ok:= &lt;-ch</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">fmt.Println(ok)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Go语言 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Go语言ElasticSearch的使用</title>
      <link href="/2020/2AATQ45.html"/>
      <url>/2020/2AATQ45.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-ElasticSearch的介绍"><a href="#1-ElasticSearch的介绍" class="headerlink" title="1. ElasticSearch的介绍"></a>1. ElasticSearch的介绍</h2><p>ElasticSearch是一个基于Lucene的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。Elasticsearch是用Java语言开发的，并作为Apache许可条款下的开放源码发布，是一种流行的企业级搜索引擎。ElasticSearch用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。官方客户端在Java、.NET（C#）、PHP、Python、Apache Groovy、Ruby和许多其他语言中都是可用的。根据DB-Engines的排名显示，Elasticsearch是最受欢迎的企业搜索引擎，其次是Apache Solr，也是基于Lucene。</p>]]></content>
      
      
      <categories>
          
          <category> Go语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go语言Kafka的使用</title>
      <link href="/2020/3EG8DED.html"/>
      <url>/2020/3EG8DED.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-Kafka介绍"><a href="#1-Kafka介绍" class="headerlink" title="1. Kafka介绍"></a>1. Kafka介绍</h2><h3 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1. 简介"></a>1.1. 简介</h3><p>一个分布式、支持分区的（partition）、多副本的（replica），基于zookeeper协调的分布式消息系统，它的最大的特性就是可以实时的处理大量数据以满足各种需求场景。</p><h3 id="1-2-开发语言"><a href="#1-2-开发语言" class="headerlink" title="1.2. 开发语言"></a>1.2. 开发语言</h3><p>Scala、Java</p><h3 id="1-3-特性"><a href="#1-3-特性" class="headerlink" title="1.3. 特性"></a>1.3. 特性</h3><ul><li>高吞吐、低延迟：每秒几十万处理能力；</li><li>可扩展：支持集群，热扩展；</li><li>持久性、可靠性：持久化到本地磁盘，支持数据备份；</li><li>容错性：允许集群节点失效；</li><li>高并发：支持千级并发；</li></ul><h3 id="1-4-使用场景"><a href="#1-4-使用场景" class="headerlink" title="1.4. 使用场景"></a>1.4. 使用场景</h3><ul><li>日志收集</li><li>消息系统</li><li>活动跟踪</li><li>监控数据</li><li>流处理</li></ul><h2 id="2-使用示例"><a href="#2-使用示例" class="headerlink" title="2. 使用示例"></a>2. 使用示例</h2><h3 id="2-1-生产者示例"><a href="#2-1-生产者示例" class="headerlink" title="2.1. 生产者示例"></a>2.1. 生产者示例</h3><h3 id="2-2-消费者示例"><a href="#2-2-消费者示例" class="headerlink" title="2.2. 消费者示例"></a>2.2. 消费者示例</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/Shopify/sarama"</span></span><br><span class="line"><span class="string">"sync"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">syncWait := sync.WaitGroup&#123;&#125;</span><br><span class="line">consumer , err:= sarama.NewConsumer([]<span class="keyword">string</span>&#123;<span class="string">"localhost:9092"</span>,<span class="string">","</span>&#125;,<span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Failed to start consumer."</span>,err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">partList,err:= consumer.Partitions(<span class="string">"data"</span>)<span class="comment">//获取分区列表</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Failed to get the list of partitions."</span>,err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(partList)</span><br><span class="line"><span class="comment">//对每个分区单独开启线程去读取消息</span></span><br><span class="line"><span class="keyword">for</span> pactition := <span class="keyword">range</span> partList &#123;</span><br><span class="line">pc,err:= consumer.ConsumePartition(<span class="string">"data"</span>,<span class="keyword">int32</span>(pactition),sarama.OffsetNewest)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Failed to start consumer for partition"</span>,pactition,err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">defer</span> pc.AsyncClose()</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(partitioner sarama.PartitionConsumer)</span></span> &#123;</span><br><span class="line">syncWait.Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> msg := <span class="keyword">range</span> pc.Messages() &#123;</span><br><span class="line">fmt.Println(msg.Partition,msg.Offset,msg.Topic,msg.Key,msg.Value)</span><br><span class="line">&#125;</span><br><span class="line">&#125;(pc)</span><br><span class="line">&#125;</span><br><span class="line">syncWait.Wait()</span><br><span class="line">consumer.Close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Go语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go语言Sync包同步等待组</title>
      <link href="/2020/3N2EAPR.html"/>
      <url>/2020/3N2EAPR.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-场景描述"><a href="#1-场景描述" class="headerlink" title="1. 场景描述"></a>1. 场景描述</h2><p>需要等待其他协程完成工作才能使当前协程继续执行下去的情况下，需要等待其他协程的完成。</p><h2 id="2-使用示例"><a href="#2-使用示例" class="headerlink" title="2. 使用示例"></a>2. 使用示例</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"sync"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> fmt.Println(<span class="string">"主线程退出"</span>)</span><br><span class="line">syncWait := sync.WaitGroup&#123;&#125;</span><br><span class="line">syncWait.Add(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(num <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">fmt.Println(num)</span><br><span class="line">syncWait.Done()</span><br><span class="line">&#125;(i)</span><br><span class="line">&#125;</span><br><span class="line">syncWait.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Go语言 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Go语言context包详解</title>
      <link href="/2020/73XEZ7.html"/>
      <url>/2020/73XEZ7.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-Context包介绍"><a href="#1-Context包介绍" class="headerlink" title="1. Context包介绍"></a>1. Context包介绍</h2><h3 id="1-1-结构解析"><a href="#1-1-结构解析" class="headerlink" title="1.1. 结构解析"></a>1.1. 结构解析</h3><pre class="mermaid">graph TB;    idx[empty]　　id1[BackGround]　　id2[子Context]　　id3[子Context]　　id4[子Context]　　id5[子Context]　　id6[子Context]　　id7[子Context]　　id0[.....]　　id02[.....]　　id03[.....]　　id0000[......]　　idx-->|创建|id1　　id0-->|......|id0000　　id1-->id2　　id1-->id3　　id1-->|......|id0　　id2-->id4　　id2-->id5　　id2-->|......|id02　　id3-->id6　　id3-->id7　　id3-->|......|id03</pre><h3 id="1-2-应用场景"><a href="#1-2-应用场景" class="headerlink" title="1.2. 应用场景"></a>1.2. 应用场景</h3><ul><li>web开发中，单个请求对应多个协程的数据交互；当该次请求的某个环节出现不可继续的错误，则取消该context，并通知该次请求的所有协程退出，并释放资源。</li><li>分布式系统中，全链路追踪</li><li>超时控制</li></ul><h2 id="2-使用场景示例"><a href="#2-使用场景示例" class="headerlink" title="2. 使用场景示例"></a>2. 使用场景示例</h2><h3 id="2-1-单context多协程控制退出"><a href="#2-1-单context多协程控制退出" class="headerlink" title="2.1. 单context多协程控制退出"></a>2.1. 单context多协程控制退出</h3><p>在该场景下，多个协程使用一个context，当该context取消时，所有使用该ctx的协程都会收到通知；关于这点可能有些疑惑，难道通道不是只能接收一次数据吗？查看源码可知，cacel操作实际上关闭了done通道，而select操作对于通道关闭也是会接收到结果的，关于这一点在以下代码中进行验证。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>,<span class="number">1</span>)</span><br><span class="line"><span class="built_in">close</span>(ch)</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;- ch:</span><br><span class="line">fmt.Println(<span class="string">"通道已经关闭"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ch1 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>,<span class="number">1</span>)</span><br><span class="line">ch1 &lt;- <span class="number">1</span></span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;- ch1:</span><br><span class="line">fmt.Println(<span class="string">"通道接收到了数据"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pro</span><span class="params">(ctx context.Context, num <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> ; ;  &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;- ctx.Done():</span><br><span class="line">fmt.Println(num,<span class="string">"号 exit."</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(num,<span class="string">"号协程。"</span>)</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx,cancel := context.WithCancel(context.Background())</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i&lt;<span class="number">10</span> ; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> pro(ctx,i)</span><br><span class="line">&#125;</span><br><span class="line">time.Sleep(time.Second*<span class="number">3</span>)</span><br><span class="line">cancel()</span><br><span class="line">time.Sleep(time.Second*<span class="number">3</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-多context多协程控制退出"><a href="#2-2-多context多协程控制退出" class="headerlink" title="2.2. 多context多协程控制退出"></a>2.2. 多context多协程控制退出</h3><p>在该场景下，若父context被取消，则所有子context都会收到取消通知。若取消子context，则不会影响父context以及同级context。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pro</span><span class="params">(ctx context.Context, num <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-ctx.Done():</span><br><span class="line">fmt.Println(num, <span class="string">"号 exit."</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(num, <span class="string">"号协程。"</span>)</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx, cancel := context.WithCancel(context.Background())</span><br><span class="line">ctx1, cancel1 := context.WithCancel(ctx)</span><br><span class="line">ctx2, cancel2 := context.WithCancel(ctx1)</span><br><span class="line"><span class="keyword">go</span> pro(ctx, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">go</span> pro(ctx1, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">go</span> pro(ctx2, <span class="number">2</span>)</span><br><span class="line">time.Sleep(time.Second * <span class="number">3</span>)</span><br><span class="line">option:= <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> option == <span class="number">0</span> &#123;</span><br><span class="line">cancel()</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> option == <span class="number">1</span> &#123;</span><br><span class="line">cancel1()</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">cancel2()</span><br><span class="line">&#125;</span><br><span class="line">time.Sleep(time.Second * <span class="number">3</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-全链路追踪"><a href="#2-3-全链路追踪" class="headerlink" title="2.3. 全链路追踪"></a>2.3. 全链路追踪</h3>]]></content>
      
      
      <categories>
          
          <category> Go语言 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot和SpringMVC的区别</title>
      <link href="/2020/2QV9ZH2.html"/>
      <url>/2020/2QV9ZH2.html</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot和SpringMVC的区别"><a href="#SpringBoot和SpringMVC的区别" class="headerlink" title="SpringBoot和SpringMVC的区别"></a>SpringBoot和SpringMVC的区别</h1><p>spring boot只是一个配置工具,整合工具,辅助工具.</p><p>springmvc是框架,项目中实际运行的代码</p><p>Spring 框架就像一个家族，有众多衍生产品例如 boot、security、jpa等等。但他们的基础都是Spring 的ioc和 aop，ioc 提供了依赖注入的容器， aop解决了面向横切面的编程，然后在此两者的基础上实现了其他延伸产品的高级功能。</p><p>Spring MVC提供了一种轻度耦合的方式来开发web应用。它是Spring的一个模块，是一个web框架。通过Dispatcher Servlet, ModelAndView 和 View Resolver，开发web应用变得很容易。解决的问题领域是网站应用程序或者服务开发——URL路由、Session、模板引擎、静态Web资源等等。</p><p>Spring Boot实现了自动配置，降低了项目搭建的复杂度。它主要是为了解决使用Spring框架需要进行大量的配置太麻烦的问题，所以它并不是用来替代Spring的解决方案，而是和Spring框架紧密结合用于提升Spring开发者体验的工具。同时它集成了大量常用的第三方库配置(例如Jackson, JDBC, Mongo, Redis, Mail等等)，Spring Boot应用中这些第三方库几乎可以零配置的开箱即用(out-of-the-box)。</p><p>Spring Boot只是承载者，辅助你简化项目搭建过程的。如果承载的是WEB项目，使用Spring MVC作为MVC框架，那么工作流程和你上面描述的是完全一样的，因为这部分工作是Spring MVC做的而不是Spring Boot。</p><p>对使用者来说，换用Spring Boot以后，项目初始化方法变了，配置文件变了，另外就是不需要单独安装Tomcat这类容器服务器了，maven打出jar包直接跑起来就是个网站，但你最核心的业务逻辑实现与业务流程实现没有任何变化。</p><p>总结：Spring 最初利用“工厂模式”（DI）和“代理模式”（AOP）解耦应用组件。大家觉得挺好用，于是按照这种模式搞了一个 MVC框架（一些用Spring 解耦的组件），用开发 web 应用（ SpringMVC ）。然后发现每次开发都写很多样板代码，为了简化工作流程，于是开发出了一些“懒人整合包”（starter），这套就是 Spring Boot。</p><p>所以，用最简练的语言概括就是：</p><p>Spring 是一个“引擎”；</p><p>Spring MVC 是基于Spring的一个 MVC 框架；</p><p>Spring Boot 是基于Spring4的条件注册的一套快速开发整合包。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo搭建静态博客</title>
      <link href="/2020/2B45ZZT.html"/>
      <url>/2020/2B45ZZT.html</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo搭建静态博客"><a href="#Hexo搭建静态博客" class="headerlink" title="Hexo搭建静态博客"></a>Hexo搭建静态博客</h1>]]></content>
      
      
      <categories>
          
          <category> 杂文 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Go语言etcd的使用示例</title>
      <link href="/2020/1946C60.html"/>
      <url>/2020/1946C60.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-etcd介绍"><a href="#1-etcd介绍" class="headerlink" title="1. etcd介绍"></a>1. etcd介绍</h2><h3 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1. 概念"></a>1.1. 概念</h3><p>高可用的分布式key-value存储，用于配置共享和服务发现。</p><h3 id="1-2-类似项目"><a href="#1-2-类似项目" class="headerlink" title="1.2. 类似项目"></a>1.2. 类似项目</h3><ul><li>zookeeper</li><li>consul</li></ul><h3 id="1-3-开发语言"><a href="#1-3-开发语言" class="headerlink" title="1.3. 开发语言"></a>1.3. 开发语言</h3><p> GoLang</p><h3 id="1-4-特性"><a href="#1-4-特性" class="headerlink" title="1.4. 特性"></a>1.4. 特性</h3><ul><li>提供restful的http接口；</li><li>基于raft算法的强一致性[^强一致性]、高可用服务存储每一款；</li></ul><h3 id="1-5-应用场景"><a href="#1-5-应用场景" class="headerlink" title="1.5. 应用场景"></a>1.5. 应用场景</h3><ul><li>服务发现和服务注册</li><li>配置中心</li><li>分布式锁</li><li>主机选举</li></ul><h3 id="1-6-Docker部署etcd"><a href="#1-6-Docker部署etcd" class="headerlink" title="1.6. Docker部署etcd"></a>1.6. Docker部署etcd</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /tmp/etcd-data.tmp &amp;&amp; mkdir -p /tmp/etcd-data.tmp &amp;&amp; \</span><br><span class="line">  docker rmi gcr.io/etcd-development/etcd:v3.4.5 || true &amp;&amp; \</span><br><span class="line">  docker run \</span><br><span class="line">  -p 2379:2379 \</span><br><span class="line">  -p 2380:2380 \</span><br><span class="line">  --mount type=bind,source=/tmp/etcd-data.tmp,destination=/etcd-data \</span><br><span class="line">  --name etcd-gcr-v3.4.5 \</span><br><span class="line">  gcr.io/etcd-development/etcd:v3.4.5 \</span><br><span class="line">  /usr/local/bin/etcd \</span><br><span class="line">  --name s1 \</span><br><span class="line">  --data-dir /etcd-data \</span><br><span class="line">  --listen-client-urls http://0.0.0.0:2379 \</span><br><span class="line">  --advertise-client-urls http://0.0.0.0:2379 \</span><br><span class="line">  --listen-peer-urls http://0.0.0.0:2380 \</span><br><span class="line">  --initial-advertise-peer-urls http://0.0.0.0:2380 \</span><br><span class="line">  --initial-cluster s1=http://0.0.0.0:2380 \</span><br><span class="line">  --initial-cluster-token tkn \</span><br><span class="line">  --initial-cluster-state new \</span><br><span class="line">  --log-level info \</span><br><span class="line">  --logger zap \</span><br><span class="line">  --log-outputs stderr</span><br><span class="line"></span><br><span class="line">docker exec etcd-gcr-v3.4.5 /bin/sh -c "/usr/local/bin/etcd --version"</span><br><span class="line">docker exec etcd-gcr-v3.4.5 /bin/sh -c "/usr/local/bin/etcdctl version"</span><br><span class="line">docker exec etcd-gcr-v3.4.5 /bin/sh -c "/usr/local/bin/etcdctl endpoint health"</span><br><span class="line">docker exec etcd-gcr-v3.4.5 /bin/sh -c "/usr/local/bin/etcdctl put foo bar"</span><br><span class="line">docker exec etcd-gcr-v3.4.5 /bin/sh -c "/usr/local/bin/etcdctl get foo"</span><br></pre></td></tr></table></figure><h3 id="1-7-注意事项"><a href="#1-7-注意事项" class="headerlink" title="1.7. 注意事项"></a>1.7. 注意事项</h3><ol><li>使用etcdctl v3 版本时，需要设置环境变量 <code>ETCDCTL_API=3</code>。</li></ol><p>[^强一致性]: 强一致性: 在有多台服务器的场景下，任意一台数据发生改变，你所读取到的数据均为已改变的数据。</p>]]></content>
      
      
      <categories>
          
          <category> Go语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LVS原理介绍</title>
      <link href="/2020/224PAWM.html"/>
      <url>/2020/224PAWM.html</url>
      
        <content type="html"><![CDATA[<h1 id="LVS原理介绍"><a href="#LVS原理介绍" class="headerlink" title="LVS原理介绍"></a>LVS原理介绍</h1><hr><h2 id="1-LVS是什么？"><a href="#1-LVS是什么？" class="headerlink" title="1. LVS是什么？"></a>1. LVS是什么？</h2><hr><ul><li>LVS，全称Linux Virtual Server，是国人章文嵩发起的一个开源项目。</li><li>在社区具有很大的热度，是一个基于四层、具有强大性能的反向代理服务器。</li><li>早期使用lvs需要修改内核才能使用，但是由于性能优异，现在已经被收入内核。</li><li>LVS通过工作于内核的ipvs模块来实现功能，其主要工作于netfilter 的INPUT链上。</li><li>而用户需要对ipvs进行操作配置则需要使用ipvsadm这个工具。</li><li>ipvsadm主要用于设置lvs模型、调度方式以及指定后端主机。</li></ul><h2 id="2-LVS中的角色"><a href="#2-LVS中的角色" class="headerlink" title="2. LVS中的角色"></a>2. LVS中的角色</h2><hr><p>LVS的一些相关术语</p><p>LVS的模型中有两个角色：<br>调度器:Director，又称为Dispatcher，Balancer<br>调度器主要用于接受用户请求。<br>真实主机:Real Server，简称为RS。<br>用于真正处理用户的请求。<br>而为了更好地理解，我们将所在角色的IP地址分为以下三种：<br>Director Virtual IP:调度器用于与客户端通信的IP地址，简称为VIP<br>Director IP:调度器用于与RealServer通信的IP地址，简称为DIP。<br>Real Server : 后端主机的用于与调度器通信的IP地址，简称为RIP。</p>]]></content>
      
      
      <categories>
          
          <category> 系统架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据完整性设计理解</title>
      <link href="/2020/YE6KFM.html"/>
      <url>/2020/YE6KFM.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-数据库的完整性设计"><a href="#1-数据库的完整性设计" class="headerlink" title="1. 数据库的完整性设计"></a>1. 数据库的完整性设计</h2><hr><h3 id="1-1-数据完整性设计理解"><a href="#1-1-数据完整性设计理解" class="headerlink" title="1.1. 数据完整性设计理解"></a>1.1. 数据完整性设计理解</h3><p>数据库完整性是指数据库中数据的正确性和相容性。数据库完整性由各种各样的完整性约束来保证，因此可以说数据库完整性设计就是数据庠完整性约束的设计。数据库完整性约束可以通过DBMS<a href="数据库管理系统。">^DBMS</a>或应用程序来实现，基于DBMS的完整性约束作为模式的一部分存入数据库中。通过DBMS实现的数据库完整性按照数据库设计步骤进行设计，而由应用软件实现的数据库完整性则纳入应用软件设计。</p><hr><h3 id="1-2-数据库完整性设计原则"><a href="#1-2-数据库完整性设计原则" class="headerlink" title="1.2. 数据库完整性设计原则"></a>1.2. 数据库完整性设计原则</h3><ol><li>静态约束应尽量包含在数据库模式中，而动态约束由应用程序实现。</li><li>触发器性能开销大，非用不可时使用before触发器。</li><li>制定完整性约束的命名规范。</li><li>根据业务规则对数据库完整性进行测试，排除约束冲突。</li></ol><hr><h3 id="1-3-数据库完整性的作用"><a href="#1-3-数据库完整性的作用" class="headerlink" title="1.3. 数据库完整性的作用"></a>1.3. 数据库完整性的作用</h3><ul><li>防止合法用户使用数据库时向数据库中添加不合语义的数据。</li><li>降低应用程序的复杂性，提高应用程序的运行效率。</li><li>比应用程序更容易实现数据库的完整性。</li></ul><hr><h3 id="1-4-六类数据库完整性约束"><a href="#1-4-六类数据库完整性约束" class="headerlink" title="1.4. 六类数据库完整性约束"></a>1.4. 六类数据库完整性约束</h3><ol><li>列级静态约束</li><li>元组级静态约束</li><li>关系级静态约束</li><li>列级动态约束</li><li>元组级动态约束</li><li>关系级动态约束</li></ol><hr><h3 id="1-5-数据库完整性设计示例"><a href="#1-5-数据库完整性设计示例" class="headerlink" title="1.5. 数据库完整性设计示例"></a>1.5. 数据库完整性设计示例</h3><ol><li><p>需求分析阶段</p><ul><li><p>经过系统分析员、数据库分析员和用户的共同努力，确定系统模型中应该包含的对象，如人事及工资管理系统中的部门、员工和经理等，以及各种业务规则。</p></li><li><p>在完成寻找业务规则的工作之后，确定要作为数据库完整性的业务规则，并对业务规则进行分类。其中作为数据库模式一部分的完整性设计按下面的过程进行，而由应用软件来实现的数据库完整性设计将按照软件工程的方法进行。</p></li></ul></li><li><p>概念结构设计阶段</p><ul><li>概念结构设计阶段是将依据需求分析的结果转换成一个独立于具体DBMS的概念模型，即实体关系图（Entity-RelationshipDiagram,ERD）。在概念结构设计阶段就要开始数据库完整性设计的实质阶段，因为此阶段的实体关系将在逻辑结构设计阶段转化为实体完整性约束和参照完整性约束，到逻辑结构设计阶段将完成设计的主要工作。</li></ul></li><li><p>逻辑结构设计阶段</p><ul><li><p>此阶段就是将概念结构转换为某个DBMS所支持的数据模型，并对其进行优化，包括对关系模型的规范化。此时，依据DBMS提供的完整性约束机制，对尚未加入逻辑结构中的完整性约束列表，逐条选择合适的方式加以实现。</p></li><li><p>在逻辑结构设计阶段结束时，作为数据库模式一部分的完整性设计也就基本完成了。每种业务规则都可能有好几种实现方式，应该选择对数据库性能影响最小的一种，有时需通过实际测试来决定。</p></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL的SQL性能优化总结</title>
      <link href="/2020/1905944.html"/>
      <url>/2020/1905944.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-对于select-要时刻保持谨慎的态度"><a href="#1-对于select-要时刻保持谨慎的态度" class="headerlink" title="1. 对于select *要时刻保持谨慎的态度"></a>1. 对于select *要时刻保持谨慎的态度</h2><p>绝大多数情况，是不需要<code>select *</code>的。一旦使用了这种语句，便会让优化器无法完成索引覆盖扫描这类优化，而且还会增加额外的I/O、内存和CPU的消耗。<br>当然，使用<code>select *</code>也并不是全是坏处，合理的使用<code>select *</code>可以简化开发，提高相同代码的复用性。  </p><hr><h2 id="2-是否扫描的太多额外的记录"><a href="#2-是否扫描的太多额外的记录" class="headerlink" title="2. 是否扫描的太多额外的记录"></a>2. 是否扫描的太多额外的记录</h2><p>有时候会发现某些查询可能需要读取几千行数据，但是仅返回几条或者很少的结果，可以使用以下方式去优化：</p><ul><li>看看能否改表结构。例如使用汇总表</li><li>看看获取数据结果的方式是否最优，获取路劲是否已经是最短。<br>使用覆盖索引，把所有需要的列都放到索引中，以减少返回表中对应行中取数据的步骤。</li></ul><hr><h2 id="3-切分某些SQL语句"><a href="#3-切分某些SQL语句" class="headerlink" title="3. 切分某些SQL语句"></a>3. 切分某些SQL语句</h2><p>传统的互联网系统中，强调网络连接尽量少，数据层尽可能在一次连接中完成尽可能多的工作，防止建立多次链接，但是这种想法对于MySQL并不适用，MySQL从设计上让连接和断开都很轻量，在一般服务器上可以支持每秒超过10万的查询。<br>所以对于有些场景下，可以将一个大的查询“分而治之”，切分成小查询，然后再组合起来。例如以下情况：</p><ul><li>对于全量数据查询变成分页。假如一张表中有数千万条数据，一次<code>select all</code>，肯定是不行的。可以换成一次取一部分，把一次的压力分摊。</li><li>删除大量旧数据的时候，不要一个大的语句一次性清完，推荐一次删一万条。如果用一个大的语句一次性完成的话，可能需要一次锁住大量数据，占满大量日志事务，让Mysql停在那儿了，为避免这种情况发生，最好一次性删除一万条左右的数据，然后每次删完暂停一会儿再操作，将服务器上的一次性压力分散。</li></ul><p>注意：虽然Mysql建立连接十分轻量，但是这不意味着可以逐条循环中查询然后再拼接，这样效率依然是非常慢，而且通常是工作中sql优化的点。  </p><hr><h2 id="4-慎用join操作"><a href="#4-慎用join操作" class="headerlink" title="4. 慎用join操作"></a>4. 慎用<code>join</code>操作</h2><p>这算是一条禁忌吧，很多公司的互联网产品都杜绝join操作，换成先从一张表中先取出数据id，再从另外一张表中使用<code>where in</code>查询的两次单表查询操作。主要是以下几点原因：</p><ul><li>让应用的缓存(redis、memcache等)更高效。例如在第一张表中查询出部分id了，如果命中了缓存，就可以省去一条<code>where in</code>语句了。</li><li>更容易应对业务的发展，方便对数据库进行拆分，更容易做到高性能和高扩展。</li><li>对where in中的id进行升序排序后，查询效率比join的随机关联更高效</li><li>减少多余的查询。在应用层中两次查询，意味着对某条记录应用只需要查询一次，而使用<code>join</code>可能需要重复的扫描访问一部分数据。</li><li>单张表查询可以减少锁的竞争。<br>假如非用不可，可以采用以下方式来优化：</li><li>确保<code>ON</code>或者<code>using</code>子句中的列上有索引</li><li>确保任何的<code>group by</code>和<code>order by</code>中的表达式只涉及到一个表中的列。</li></ul><hr><h2 id="5-在性能要求比较高的场景中，杜绝查询中使用临时表"><a href="#5-在性能要求比较高的场景中，杜绝查询中使用临时表" class="headerlink" title="5. 在性能要求比较高的场景中，杜绝查询中使用临时表"></a>5. 在性能要求比较高的场景中，杜绝查询中使用临时表</h2><p>MySQL的临时表示没有任何索引的，使用临时表一般都意味着性能比较低,因此在对性能要求比较高的场景中，最好不要使用带有临时表的操作：</p><ul><li>未带索引的字段上的<code>group by</code>操作。</li><li>UNION查询。</li><li>查询语句中的子查询。</li><li>部分<code>order by</code>操作，例如<code>distinct</code>函数和<code>order by</code>一起使用且<code>distinct</code>和<code>order by</code>同一个字段。再例如某些情况下<code>group by</code>和<code>order by</code>字段不同。<br>具体是否用到临时表，可以通过explain来查看，查看Extra列的结果，如果出现<code>Using temporary</code>则需要注意。</li></ul><hr><h2 id="6-count-函数优化"><a href="#6-count-函数优化" class="headerlink" title="6. count()函数优化"></a>6. <code>count()</code>函数优化</h2><p><code>count()</code>函数有一点需要特别注意：它是不统计值为NULL的字段的！所以:</p><ul><li>不能指定查询结果的某一列，来统计结果行数。即<code>count(xx column)</code> 不太好。</li><li>如果想要统计结果集，就使用<code>count(\*)</code>，性能也会很好。</li><li>尽量不使用子查询</li><li>尽量别使用子查询，尽可能的使用关联来代替</li></ul><hr><h2 id="7-优化分页limit"><a href="#7-优化分页limit" class="headerlink" title="7. 优化分页limit"></a>7. 优化分页<code>limit</code></h2><p>通常我们在分页的时候，通常使用的是limit 50, 10这种语句。数据少还不错，但是当数据偏移量非常大的时候，性能就会出现问题，例如select xx,xxx from test_table limit 100000020, 20。扫描了100000020条数据，才返回20条数据。这个时候我们可以用一下两种方式来优化：</p><ul><li>利用between and和主键索引</li><li>利用主键自增id，我们如果知道了分页的上边界，以上查询可以改写为：<br><code>select xxx, xxx from test_table where id between xxxxx and xxxx</code>。<br>利用自增主键索引、<code>order by</code>加<code>limit</code>，不使用<code>offset</code></li></ul><p>limit和offset的问题，其实就是offset的问题，它会导致MySQL扫描大量不需要的行然后再抛弃掉。如果使用某个标签记录上一次所取数据的位置，那么下次就可以直接从书签位置开始扫描，这样就可以避免使用offset。<br>例如以上查询可以改为:<br>第一组数据：<code>select xxx, xxxx from test_table order by id desc limit 20;</code><br>这样就拿到了本次数据和下次数据的分解id值，则下一页查询就知道可以：<br><code>select xxx, xxx from test_table where id &lt; &#39;上页id分界值&#39; order by id desc limit 20</code></p><hr><h2 id="8-熟悉并灵活使用explain"><a href="#8-熟悉并灵活使用explain" class="headerlink" title="8. 熟悉并灵活使用explain"></a>8. 熟悉并灵活使用<code>explain</code></h2><p>以下是mysql执行查询的整个过程，explain可以查看图中标红部分，</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6种负载均衡算法</title>
      <link href="/2020/FC7S68.html"/>
      <url>/2020/FC7S68.html</url>
      
        <content type="html"><![CDATA[<h1 id="六种负载均衡算法"><a href="#六种负载均衡算法" class="headerlink" title="六种负载均衡算法"></a>六种负载均衡算法</h1><hr><h2 id="1-轮询法"><a href="#1-轮询法" class="headerlink" title="1. 轮询法"></a>1. 轮询法</h2><p>将请求按顺序轮流地分配到后端服务器上，它均衡地对待后端的每一台服务器，而不关心服务器实际的连接数和当前的系统负载。</p><hr><h2 id="2-随机法"><a href="#2-随机法" class="headerlink" title="2. 随机法"></a>2. 随机法</h2><p>通过系统的随机算法，根据后端服务器的列表大小值来随机选取其中的一台服务器进行访问。由概率统计理论可以得知，随着客户端调用服务端的次数增多，其实际效果越来越接近于平均分配调用量到后端的每一台服务器，也就是轮询的结果。</p><hr><h2 id="3-源地址哈希法"><a href="#3-源地址哈希法" class="headerlink" title="3. 源地址哈希法"></a>3. 源地址哈希法</h2><p>源地址哈希的思想是根据获取客户端的IP地址，通过哈希函数计算得到的一个数值，用该数值对服务器列表的大小进行取模运算，得到的结果便是客服端要访问服务器的序号。采用源地址哈希法进行负载均衡，同一IP地址的客户端，当后端服务器列表不变时，它每次都会映射到同一台后端服务器进行访问。</p><hr><h2 id="4-加权轮询法"><a href="#4-加权轮询法" class="headerlink" title="4. 加权轮询法"></a>4. 加权轮询法</h2><p>不同的后端服务器可能机器的配置和当前系统的负载并不相同，因此它们的抗压能力也不相同。给配置高、负载低的机器配置更高的权重，让其处理更多的请；而配置低、负载高的机器，给其分配较低的权重，降低其系统负载，加权轮询能很好地处理这一问题，并将请求顺序且按照权重分配到后端。</p><hr><h2 id="5-加权随机法"><a href="#5-加权随机法" class="headerlink" title="5. 加权随机法"></a>5. 加权随机法</h2><p>与加权轮询法一样，加权随机法也根据后端机器的配置，系统的负载分配不同的权重。不同的是，它是按照权重随机请求后端服务器，而非顺序。</p><hr><h2 id="6-最小连接数法"><a href="#6-最小连接数法" class="headerlink" title="6. 最小连接数法"></a>6. 最小连接数法</h2><p>最小连接数算法比较灵活和智能，由于后端服务器的配置不尽相同，对于请求的处理有快有慢，它是根据后端服务器当前的连接情况，动态地选取其中当前积压连接数最少的一台服务器来处理当前的请求，尽可能地提高后端服务的利用效率，将负责合理地分流到每一台服务器。</p>]]></content>
      
      
      <categories>
          
          <category> 系统架构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Go语言跨平台编译</title>
      <link href="/2020/3F6APKH.html"/>
      <url>/2020/3F6APKH.html</url>
      
        <content type="html"><![CDATA[<p>Golang 支持在一个平台下生成另一个平台可执行程序的交叉编译功能。</p><hr><h2 id="1-Mac-os"><a href="#1-Mac-os" class="headerlink" title="1. Mac os"></a>1. Mac os</h2><p>Mac下编译Linux, Windows平台的64位可执行程序：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build test.go</span><br><span class="line">CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build test.go</span><br></pre></td></tr></table></figure><hr><h2 id="2-Linux"><a href="#2-Linux" class="headerlink" title="2. Linux"></a>2. Linux</h2><p>Linux下编译Mac, Windows平台的64位可执行程序：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build test.go</span><br><span class="line">CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build test.go</span><br></pre></td></tr></table></figure><hr><h2 id="3-Windows"><a href="#3-Windows" class="headerlink" title="3. Windows"></a>3. Windows</h2><p>Windows下编译Mac, Linux平台的64位可执行程序：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build test.go</span><br><span class="line">CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build test.go</span><br></pre></td></tr></table></figure><blockquote><p>GOOS：目标可执行程序运行操作系统，支持 darwin，freebsd，linux，windows<br>GOARCH：目标可执行程序操作系统构架，包括 386，amd64，arm</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Go语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
